<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Workspace</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Workspace.AssetsControl.AccessControlExtensions">
            <summary>
            Convenience extension for IAccessScontrol service
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AssetsControl.AccessControlExtensions.GetAccessAsync(Microsoft.VisualStudio.Workspace.AssetsControl.IAssetsAccessContext,System.String,Microsoft.VisualStudio.Workspace.AssetsControl.AssetsLockScope,System.Threading.CancellationToken,System.Int32)">
             <summary>
             Get Access to a file or folder (folder access will apply to all items under that folder recursively).
            
             Note: it will throw canceled exception if the scope CacnelRequest becomes active (in addition the cancel token).
            
             </summary>
             <param name="context">asset access context</param>
             <param name="filePath">the path to file or folder, can be absolute or WorkspaceRoot relative</param>
             <param name="lockScope">lock scope</param>
             <param name="cancel">cancellation token</param>
             <param name="timeout">maximum time to wait (in milliseconds).</param>
             <returns>the access lock object, will return null if timeout reached, will throw if canceled</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AssetsControl.AccessControlExtensions.GetAccessAsync(Microsoft.VisualStudio.Workspace.AssetsControl.IAssetsAccessManager,Microsoft.VisualStudio.Workspace.AssetsControl.ContextPriority,System.String,Microsoft.VisualStudio.Workspace.AssetsControl.SharingMode,Microsoft.VisualStudio.Workspace.AssetsControl.AssetsLockScope,System.Threading.CancellationToken,System.Int32)">
             <summary>
             Get Access to a file or folder (folder access will apply to all items under that folder recursively).
            
             Note: it will throw canceled exception if the scope CacnelRequest becomes active (in addition the cancel token).
            
             </summary>
             <param name="accessControl">the access control service</param>
             <param name="priority">the priority of the work</param>
             <param name="filePath">the path to file or folder, can be absolute or WorkspaceRoot relative</param>
             <param name="sharingMode">sharing mode</param>
             <param name="lockScope">children lock scope</param>
             <param name="cancel">cancellation token</param>
             <param name="timeout">maximum time to wait (in milliseconds).</param>
             <returns>the access lock object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AssetsControl.AccessControlExtensions.GetAccessAsync(Microsoft.VisualStudio.Workspace.AssetsControl.IAssetsAccessManager,Microsoft.VisualStudio.Workspace.AssetsControl.ContextPriority,System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.Workspace.AssetsControl.SharingMode,Microsoft.VisualStudio.Workspace.AssetsControl.AssetsLockScope,System.Threading.CancellationToken,System.Int32)">
             <summary>
             Get Access to a file or folder (folder access will apply to all items under that folder recursively).
            
             Note: it will throw canceled exception if the scope CacnelRequest becomes active (in addition the cancel token).
            
             </summary>
             <param name="accessControl">the access control service</param>
             <param name="priority">the priority of the work</param>
             <param name="filePaths">the collection of strings representing path to file or folder, can be absolute or WorkspaceRoot relative</param>
             <param name="sharingMode">sharing mode</param>
             <param name="lockScope">children lock scope</param>
             <param name="cancel">cancellation token</param>
             <param name="timeout">maximum time to wait (in milliseconds).</param>
             <returns>the access lock object, null if timeout expired</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AssetsControl.AccessControlExtensions.ExecuteUnderLockWithRetry``1(Microsoft.VisualStudio.Workspace.AssetsControl.IAssetsAccessContext,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.Workspace.AssetsControl.AssetsLockScope,System.Threading.CancellationToken)">
            <summary>
            Execute action wilt lock yield and retry;
            </summary>
            <typeparam name="T">result type</typeparam>
            <param name="context">lock context</param>
            <param name="asyncAction">action to execute</param>
            <param name="filePaths">resources to lock</param>
            <param name="lockScope">lock scope</param>
            <param name="cancel">cancellation token</param>
            <returns>action result</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AssetsControl.AccessControlExtensions.ExecuteUnderLockWithRetry``1(Microsoft.VisualStudio.Workspace.AssetsControl.IAssetsAccessContext,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.String,Microsoft.VisualStudio.Workspace.AssetsControl.AssetsLockScope,System.Threading.CancellationToken)">
            <summary>
            Execute action wilt lock yield and retry;
            </summary>
            <typeparam name="T">result type</typeparam>
            <param name="context">lock context</param>
            <param name="asyncAction">action to execute</param>
            <param name="filePath">resource to lock</param>
            <param name="lockScope">lock scope</param>
            <param name="cancel">cancellation token</param>
            <returns>action result</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.AssetsControl.AccessLockYieldRequestException">
            <summary>
            Exception being thrown when attempting to acquire a lock when a higher priority scope request access to a resource already taken and not released by the current access scope.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.AssetsControl.AssetsLockScope">
            <summary>
            Scope of the lock (for folders)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.AssetsControl.AssetsLockScope.Item">
            <summary>
            lock only the item
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.AssetsControl.AssetsLockScope.DirectChildren">
            <summary>
            lock item and direct children
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.AssetsControl.AssetsLockScope.AllChildren">
            <summary>
            lock item and all children
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.AssetsControl.IAssetsAccessContext">
            <summary>
            Asset access  scope. Locks taken in the same scope will not block each other.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.AssetsControl.IAssetsAccessContext.YieldRequest">
            <summary>
            Cancellation token when AccessControl services will request the context owner to yield as soon as possible when more important
            task require access to some of the resources currently locked
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AssetsControl.IAssetsAccessContext.GetAccessAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.Workspace.AssetsControl.AssetsLockScope,System.Threading.CancellationToken,System.Int32)">
             <summary>
             Get Access to a file or folder (folder access will apply to all items under that folder recursively).
            
             Throws OperationCanceledException if "cancel" is canceled
             Throws AccessLockYieldRequestException if context is requested to yield to other more important workflow
            
             </summary>
             <param name="filePaths">the collection of strings representing path to file or folder, can be absolute or WorkspaceRoot relative</param>
             <param name="lockScope">lock scope</param>
             <param name="cancel">cancellation token</param>
             <param name="timeout">maximum time to wait (in milliseconds).</param>
             <returns>the access lock object, will return null if timeout reached, will throw if canceled</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.AssetsControl.ContextPriority">
            <summary>
            Priority for this context. It is based on the kind of work context is used to provide resource locks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.AssetsControl.ContextPriority.ServiceBackground">
            <summary>
            service (like indexing) is performing a background operation (does not directly affect current user action).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.AssetsControl.ContextPriority.UserBackground">
            <summary>
            User initiated action that we perform on a background (like delete folder).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.AssetsControl.ContextPriority.UserBlocking">
            <summary>
            User initiation action that is blocked on asset access (like rename file).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.AssetsControl.SharingMode">
            <summary>
            Access sharing semantic.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.AssetsControl.SharingMode.Exclusive">
            <summary>
            Don't share the access with any other access scope
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.AssetsControl.SharingMode.Share">
            <summary>
            Can share access with other Share scopes
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.AssetsControl.IAssetsAccessManager">
            <summary>
            Used to control the access for shared resources like files and folders
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AssetsControl.IAssetsAccessManager.CreateAccessContext(Microsoft.VisualStudio.Workspace.AssetsControl.ContextPriority,Microsoft.VisualStudio.Workspace.AssetsControl.SharingMode)">
            <summary>
            Opens a assets access context to be used by a workflow.
            </summary>
            <param name="priority">the priority of the work</param>
            <returns>new access context object</returns>
            <param name="sharingMode">sharing mode (with other contexts)</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.AssetsControl.IAssetsLock">
            <summary>
            Hold an access to a [set of] file[s] or folder[s]
            Disposing the object will release the lock and allow other scopes to take access.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.AssetsControl.IAssetsLock.YieldRequest">
            <summary>
            Cancellation token when AccessControl services will request the context owner to yield as soon as possible when more important
            task require access to some of the resources currently locked
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.AssetsControl.IAssetsLock.Context">
            <summary>
            the context used to acquire this lock
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.AsyncEvent`1">
            <summary>
            Async Event class to support firing async EventHandlers
            </summary>
            <typeparam name="TEventArgs">The EventArgs type to support</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AsyncEvent`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.AsyncEvent`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.AsyncEvent`1.AsyncInvocations">
            <summary>
            Return the async invocation list
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AsyncEvent`1.op_Addition(Microsoft.VisualStudio.Workspace.AsyncEvent{`0},System.Func{System.Object,`0,System.Threading.Tasks.Task})">
            <summary>
            Operator += to support standard mechanism of event subscription
            </summary>
            <param name="e">The async event class</param>
            <param name="callback">Async event callback to add</param>
            <returns>The existing or created Async event class</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AsyncEvent`1.op_Subtraction(Microsoft.VisualStudio.Workspace.AsyncEvent{`0},System.Func{System.Object,`0,System.Threading.Tasks.Task})">
            <summary>
            Operator -= to support standard mechanism of event subscription
            </summary>
            <param name="e">The async event class</param>
            <param name="callback">Async event callback to remove</param>
            <returns>The Async event</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AsyncEvent`1.InsertCallback(Microsoft.VisualStudio.Workspace.AsyncEvent{`0},System.Int32,System.Func{System.Object,`0,System.Threading.Tasks.Task})">
            <summary>
            Insert a callback in the specified position
            </summary>
            <param name="e">The async event class</param>
            <param name="index">Position where to insert the callback</param>
            <param name="callback">Async event callback</param>
            <returns>The Async event</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AsyncEvent`1.InvokeAsync(System.Object,`0)">
            <summary>
            Invoke async to await for each
            </summary>
            <param name="sender">sender object</param>
            <param name="eventArgs">Event Argument instance</param>
            <returns>The task to await to wait for all notifications to complete</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AsyncEvent`1.InvokeAsync(System.Object,`0,System.Boolean)">
            <summary>
            Invoke async to await for each
            </summary>
            <param name="sender">sender object</param>
            <param name="eventArgs">Event Argument instance</param>
            <param name="invokeInOrder">Invoke the subscribers in order</param>
            <returns>The task to await to wait for all notifications to complete</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.AsyncEvent`1.OnInvocationListChanged(System.Boolean)">
            <summary>
            Invoked when changes to the Invocation List are added or removed
            </summary>
            <param name="isAdding">If a new item was added otherwise remove</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Async.IAsyncEnumerable`1">
            <summary>
            IAsyncEnumerable interface
            </summary>
            <typeparam name="T">Type of item</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Async.IAsyncEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that supports asynchronous iterates through a collection.
            </summary>
            <returns>Async Enumerator instance</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Async.IAsyncEnumerator`1">
            <summary>
            IAsyncEnumerator interface
            </summary>
            <typeparam name="T">Type of item</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Async.IAsyncEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Workspace.Async.IAsyncEnumerator`1"/>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Async.IAsyncEnumerator`1.MoveNextAsync">
            <summary>
            Move to next item
            </summary>
            <returns>Completion task</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.BatchFileSystemEventArgs">
            <summary>
            Class BatchFileSystemEventArgs
            Allow a notification of multiple FileSystemEventArgs entities
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.BatchFileSystemEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.IO.FileSystemEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.BatchFileSystemEventArgs"/> class.
            </summary>
            <param name="fileSystemEvents">All file systems events</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.BatchFileSystemEventArgs.FileSystemEvents">
            <summary>
            All file system events
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.BuildConfigurationChangedEventArgs">
            <summary>
            Build configuration changed event arguments
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.BuildConfigurationChangedEventArgs.#ctor(Microsoft.VisualStudio.Workspace.ProjectTargetFileContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.BuildConfigurationChangedEventArgs"/> class.
            </summary>
            <param name="projectFileContext">The project file context</param>
            <param name="buildConfiguration">The new build configuration</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.BuildConfigurationChangedEventArgs.ProjectTargetFileContext">
            <summary>
            The project file affected
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.BuildConfigurationChangedEventArgs.BuildConfiguration">
            <summary>
            The new build configuration
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BatchFileContext">
            <summary>
            BatchFileContext class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BatchFileContext.#ctor(Microsoft.VisualStudio.Workspace.IFileContextActionBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.BatchFileContext"/> class.
            </summary>
            <param name="action">The action for this batch context</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BatchFileContext.Action">
            <summary>
            Action to execute our batch
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BatchFileContextActionResult">
            <summary>
            BatchFileContextActionResult class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BatchFileContextActionResult.#ctor(System.Collections.Generic.IReadOnlyList{System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.BatchFileContextActionResult"/> class.
            </summary>
            <param name="successProjects">Collection of Success project status</param>
            <param name="success">If overall result is success</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BatchFileContextActionResult.IsSuccessResults">
            <summary>
            Collection of success results
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildConfigurationContext">
            <summary>
            Build Configuration Context implementation
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildConfigurationContext.DataValueName">
            <summary>
            The indexed data name when defining configurations
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildConfigurationContext.ContextType">
            <summary>
            Identifies an action context that launches a debug session.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildConfigurationContext.ContextTypeGuid">
            <summary>
            Identifies an action context that launches a debug session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildConfigurationContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.BuildConfigurationContext"/> class.
            </summary>
            <param name="buildConfiguration">The build configuration</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildConfigurationContext.BuildConfiguration">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes">
            <summary>
            Build Context Types
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.BuildContextType">
            <summary>
            Build Context type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.CleanContextType">
            <summary>
            The Clean target build type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.RebuildContextType">
            <summary>
            The Rebuild target build type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.BuildAllContextType">
            <summary>
            Build All Context type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.RebuildAllContextType">
            <summary>
            Rebuild All Context type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.CleanAllContextType">
            <summary>
            Clean All Context type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.BatchContextType">
            <summary>
            The batch build type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.CustomBuildContextType">
            <summary>
            Custom Build context type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.ProjectReferencesType">
            <summary>
            Project References context type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.BuildUpToDateCheckProviderContextType">
            <summary>
            BuildUpToDateCheckProviderContext type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.BuildContextTypeGuid">
            <summary>
            Identifies an action context that launches a build.
            </summary>
            <value>{D9212C5D-975A-49E6-A753-2F586BFBF077}</value>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.CleanContextTypeGuid">
            <summary>
            Clean context type GUID
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.RebuildContextTypeGuid">
            <summary>
            Rebuild context type GUID
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.BuildAllContextTypeGuid">
            <summary>
            Build All context type GUID
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.RebuildAllContextTypeGuid">
            <summary>
            Rebuild All context type GUID
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.CleanAllContextTypeGuid">
            <summary>
            Clean All context type GUID
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.BatchContextTypeGuid">
            <summary>
            Batch context type GUID
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.CustomBuildContextTypeGuid">
            <summary>
            Custom Build context type GUID
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.ProjectReferencesTypeGuid">
            <summary>
            Project References context type GUID
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.BuildUpToDateCheckProviderContextTypeGuid">
            <summary>
            BuildUpToDateCheckProviderContext type GUID
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.GetTargetContextType(Microsoft.VisualStudio.Workspace.Build.BuildType)">
            <summary>
            Return the matching Type for a build type
            </summary>
            <param name="buildType">The target build type</param>
            <returns>The GUID of the context type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildContextTypes.GetBuildType(System.Guid)">
            <summary>
            Return the build type for target context type
            </summary>
            <param name="targetContextType">The target context type</param>
            <returns>The build type that match the target</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildFileContextActionWrapper">
            <summary>
            Implements IFileContextAction with the option to send a build message
            when the execution is cancelled
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildFileContextActionWrapper.#ctor(Microsoft.VisualStudio.Workspace.IFileContextAction,Microsoft.VisualStudio.Workspace.Build.IBuildMessageService,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.BuildFileContextActionWrapper"/> class.
            </summary>
            <param name="source">The original source action</param>
            <param name="buildMessageService">The build message service to report</param>
            <param name="projectFile">Project file to report</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildFileContextActionWrapper.Source">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildFileContextActionWrapper.DisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildFileContextActionWrapper.ExecuteWithTaskCanceledExceptionAsync(System.Func{System.Threading.Tasks.Task{Microsoft.VisualStudio.Workspace.IFileContextActionResult}},Microsoft.VisualStudio.Workspace.Build.IBuildMessageService,System.String)">
            <summary>
            Execute a callback and report a task cancelled exception
            </summary>
            <param name="callback">Callback to execute</param>
            <param name="buildMessageService">The build message service to report</param>
            <param name="projectFile">Project file to report</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildFileContextActionWrapper.ExecuteAsync(System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildIncrementalFailure">
            <summary>
            Represent a failure caused by an incremental build
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildIncrementalFailure.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.BuildIncrementalFailure"/> class.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception being propagated</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildIncrementalProgressStatus">
            <summary>
            Type of build incremental progress status
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildIncrementalProgressStatus.BuildStarted">
            <summary>
            Build started
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildIncrementalProgressStatus.BuildDependencies">
            <summary>
            Calculation of build dependencies
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildIncrementalProgressStatus.ProjectsToBuild">
            <summary>
            Notify projects to be built
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildIncrementalProgressStatus.BuildFinish">
            <summary>
            Build finished
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildIncrementalProgressStatus.BuildFailure">
            <summary>
            A Build failure exception happen during processing
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildIncrementalProgressStatus.ProjectBuildBegin">
            <summary>
            A Project build begin event
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildIncrementalProgressStatus.ProjectBuildEnd">
            <summary>
            A Project build end event
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildIncrementalProgressStatus.BuildCanceled">
            <summary>
            A Build was cancelled
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildListRequest">
            <summary>
            Class to request a build list on the build services
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildListRequest.ProjectFile">
            <summary>
            The project file to build
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildListRequest.ProjectFileTarget">
            <summary>
            Optional project target
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildListRequest.SelectedDependencies">
            <summary>
            Filter selected dependencies
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildListRequest.IncludedProjects">
            <summary>
            Included projects when building our dependency graph
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildListRequest.ExcludedProjects">
            <summary>
            Excluded projects to discard building
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildListRequest.BuildConfigurationContext">
            <summary>
            The build configuration context
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildMessage">
            <summary>
            Build Message definition
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildMessage.TaskType">
            <summary>
            Task type to create for this message
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildMessage.TaskType.None">
            <summary>
            just message
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildMessage.TaskType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildMessage.TaskType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildMessage.Code">
            <summary>
            Code error
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildMessage.ProjectFile">
            <summary>
            Project file that could have generate this message
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildMessage.Type">
            <summary>
            Task type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildMessage.LogMessage">
            <summary>
            message string to go to output window
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildMessage.TaskText">
            <summary>
            message text for task item to create
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildMessage.File">
            <summary>
            Filename (optional) for source location of the issue
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildMessage.LineNumber">
            <summary>
            Line number of the issue.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildMessage.ColumnNumber">
            <summary>
            Column number of the issue.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildMessage.SubCategory">
            <summary>
            task subcategory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildMessage.HelpKeyword">
            <summary>
            Task help keyword
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildMessagesEventArgs">
            <summary>
            Build Messages Event
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildMessagesEventArgs.#ctor(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.Build.BuildMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.BuildMessagesEventArgs"/> class.
            </summary>
            <param name="messages">Messages to flush</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildMessagesEventArgs.Messages">
            <summary>
            Message
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildProjectIncrementalContext">
            <summary>
            A context to define a project incremental build
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildProjectIncrementalContext.ProjectBuild">
            <summary>
            The project to build with dependency
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildProjectIncrementalContext.BuildType">
            <summary>
            The build type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildProjectIncrementalContext.TargetProjectBuildConfiguration">
            <summary>
            The project target configuration name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildProjectIncrementalContext.BuildConfigurationContext">
            <summary>
            The build configuration context
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildProjectIncrementalContext.IndexWorkspaceData">
            <summary>
            Optional workspace data
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildProjectIncrementalContext.Context">
            <summary>
            The incremental build context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildProjectIncrementalContext.ProjectBuildOrder">
            <summary>
            The project build order index
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildProjectIncrementalResult">
            <summary>
            Result provided for incremental build
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildProjectIncrementalResult.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.BuildProjectIncrementalResult"/> class.
            </summary>
            <param name="isSuccess">If overall success</param>
            <param name="succeeded">Number of projects that succeeded</param>
            <param name="failed">Number of projects that failed</param>
            <param name="upToDate">Number of projects that were up to date</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildProjectIncrementalResult.Succeeded">
            <summary>
            Number of projects that succeeded
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildProjectIncrementalResult.Failed">
            <summary>
            Number of projects that failed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildProjectIncrementalResult.UpToDate">
            <summary>
            Number of projects that were up to date
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildProjectIncrementalResult.IsSuccess">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildProjectReferencesContext">
            <summary>
            Context returned by IFileContextProvider(BuildProjectReferencesRequest)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildProjectReferencesContext.#ctor(System.Boolean,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.BuildProjectReferencesContext"/> class.
            </summary>
            <param name="isBuildOptedOut">If project opted out from build</param>
            <param name="projectReferences">List of project references</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildProjectReferencesContext.IsBuildOptedOut">
            <summary>
            If project opted out from build
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildProjectReferencesContext.ProjectReferences">
            <summary>
            List of project references
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildProjectReferencesRequest">
            <summary>
            Data structure to request project references
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildProjectReferencesRequest.ProjectTarget">
            <summary>
            The project target
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildProjectReferencesRequest.BuildConfigurationContext">
            <summary>
            The build configuration context
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildProjectsIncrementalSupport">
            <summary>
            Build projects support context
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildProjectsIncrementalSupport.#ctor(Microsoft.VisualStudio.Workspace.Build.BuildType,Microsoft.VisualStudio.Workspace.Build.IBuildConfigurationContext,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.Build.IProjectBuild},System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.BuildProjectsIncrementalSupport"/> class.
            </summary>
            <param name="buildType">Build type</param>
            <param name="buildConfigurationContext">Configuration context</param>
            <param name="projectsToBuilds">Info on projects to build</param>
            <param name="excludedProjects">Excluded Projects</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildProjectsIncrementalSupport.IsSupported">
            <summary>
            IsSupported field
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildProjectsIncrementalSupport.BuildContextAction">
            <summary>
            The build context action
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildProjectsIncrementalSupport.BuildType">
            <summary>
            The build type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildProjectsIncrementalSupport.BuildConfigurationContext">
            <summary>
            The build configuration context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildProjectsIncrementalSupport.ProjectsToBuilds">
            <summary>
            Optional list of project dependencies
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildProjectsIncrementalSupport.ExcludedProjects">
            <summary>
            Excluded projects
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildRequest">
            <summary>
            Build Request data
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildRequest.BuildType">
            <summary>
            The build type requested
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildRequest.EnableIncrementalBuild">
            <summary>
            If incremental build is requested
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildType">
            <summary>
            Build types available to target
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildType.None">
            <summary>
            Normal incremental build
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildType.Build">
            <summary>
            Normal incremental build
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildType.Clean">
            <summary>
            Clean build outputs
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildType.Rebuild">
            <summary>
            Re build target
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildType.BuildAll">
            <summary>
            Normal incremental build all
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildType.RebuildAll">
            <summary>
            Rebuild all
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildType.CleanAll">
            <summary>
            Clean all
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContext">
            <summary>
            BuildUpToDateActionContext class
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContext.ContextType">
            <summary>
            Identifies an action context that invoke up to date check
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContext.ContextTypeGuid">
            <summary>
            Guid of ContextType
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContext.#ctor(Microsoft.VisualStudio.Workspace.Build.IBuildUpToDateCheckProvider,System.String,System.String,Microsoft.VisualStudio.Workspace.Build.IBuildConfigurationContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContext"/> class.
            15.0 BACKCOMPAT OVERLOAD -- DO NOT TOUCH
            </summary>
            <param name="provider">IBuildUpToDateCheckProvider provider</param>
            <param name="projectFile">The context project file</param>
            <param name="target">The project target</param>
            <param name="buildConfigurationContext">Optional build configuration context</param>
            <param name="buildConfiguration">Optional build target configuration</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContext.#ctor(Microsoft.VisualStudio.Workspace.Build.IBuildUpToDateCheckProvider,System.String,System.String,Microsoft.VisualStudio.Workspace.Build.IBuildConfigurationContext,System.String,Microsoft.VisualStudio.Workspace.Build.IDependencyBuildConfigurationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContext"/> class.
            </summary>
            <param name="provider">IBuildUpToDateCheckProvider provider</param>
            <param name="projectFile">The context project file</param>
            <param name="target">The project target</param>
            <param name="buildConfigurationContext">Optional build configuration context</param>
            <param name="buildConfiguration">Optional build target configuration</param>
            <param name="dependencyBuildConfigurationContext">Dependency build configuration context</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContext.IsUpToDateAsync(System.Threading.CancellationToken)">
            <summary>
            Check if the context project file is up to date
            </summary>
            <param name="cancellationToken">A cancellation token</param>
            <returns>True or false depending if the context project file is up to date</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContextRequest">
            <summary>
            Data structure to request BuildUpToDateActionContext
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContextRequest.Target">
            <summary>
            The project target
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContextRequest.BuildConfigurationContext">
            <summary>
            The build configuration context
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContextRequest.DependencyBuildConfigurationContext">
            <summary>
            Dependency build configuration context
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContextRequest.TargetProjectBuildConfiguration">
            <summary>
            The project target configuration name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContextRequest.IndexWorkspaceData">
            <summary>
            The Index workspace data
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateActionContextRequest.BuildIncrementalContext">
            <summary>
            The incremental build context
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateCheckProviderContext">
            <summary>
            BuildUpToDateCheckProviderContext class to return info for BuildUpToDateCheckProvider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateCheckProviderContext.#ctor(System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateCheckProviderContext"/> class.
            </summary>
            <param name="inputFiles">Input files</param>
            <param name="outputFiles">Output files</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateCheckProviderContext.InputFiles">
            <summary>
            Input files relevant for a project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateCheckProviderContext.OutputFiles">
            <summary>
            Output files relevant for a project
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateCheckProviderOptions">
            <summary>
            Options for IBuildUpToDateCheckProvider
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateCheckProviderOptions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateCheckProviderRequest">
            <summary>
            Data structure to request BuildUpToDateCheckProvider info
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateCheckProviderRequest.Target">
            <summary>
            The project target
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateCheckProviderRequest.BuildConfigurationContext">
            <summary>
            The build configuration context
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateCheckProviderRequest.TargetProjectBuildConfiguration">
            <summary>
            The project target configuration name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildUpToDateCheckProviderRequest.IndexWorkspaceData">
            <summary>
            The Index workspace data
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.DependencyBuildConfigurationContext">
            <summary>
            Class DependencyBuildConfigurationContext
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.DependencyBuildConfigurationContext.#ctor(System.String,Microsoft.VisualStudio.Workspace.Build.IBuildConfigurationContext,Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceData)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.DependencyBuildConfigurationContext"/> class.
            </summary>
            <param name="projectDependencyFile">Dependency project file</param>
            <param name="buildConfigurationContext">Build configuration context</param>
            <param name="indexWorkspaceData">Optional index workspace data</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.DependencyBuildConfigurationContext.BuildConfigurationContext">
            <summary>
            Build configuration context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.DependencyBuildConfigurationContext.ProjectDependency">
            <summary>
            The project dependency context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.DependencyBuildConfigurationContext.IndexWorkspaceData">
            <summary>
            The Index workspace data
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.ExportBuildUpToDateCheckAttribute">
            <summary>
            ExportBuildUpToDateCheckAttribute class to MEF export Build up to date provider attributes
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.ExportBuildUpToDateCheckAttribute.#ctor(Microsoft.VisualStudio.Workspace.Build.BuildUpToDateCheckProviderOptions,System.String,System.String[],Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.ExportBuildUpToDateCheckAttribute"/> class.
            </summary>
            <param name="options">provider options</param>
            <param name="type">The unique type for this IBuildUpToDateCheckProviderMetadata</param>
            <param name="supportedFileExtensions">The supported file extension</param>
            <param name="priority">File scanner priority</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.ExportBuildUpToDateCheckAttribute.Options">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.ExportBuildUpToDateCheckAttribute.OptionFlagsInternal">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildActionProgress">
            <summary>
            Interface for a in-proc or out-of-proc build action progress
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildActionProgress.ReportAsync(Microsoft.VisualStudio.Workspace.Build.BuildMessage,System.Object)">
            <summary>
            Report build status
            </summary>
            <param name="buildMessage">The build message</param>
            <param name="progressData">Optional data</param>
            <returns>Task completion</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildConfigurationContext">
            <summary>
            Define a Build Configuration Context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IBuildConfigurationContext.BuildConfiguration">
            <summary>
            Configuration setting context
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildFileContext">
            <summary>
            Interface to describe a build file context
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildFileContext.ExecuteBuildAsync(Microsoft.VisualStudio.Workspace.Build.IBuildActionProgress,System.Threading.CancellationToken)">
            <summary>
            Execute a build action
            </summary>
            <param name="progress">A means to report progress as the build executes.</param>
            <param name="cancellationToken">A token that may cancel the build.</param>
            <returns>Completion task with build succeed result.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildIncrementalContext">
            <summary>
            Context of an Incremental build
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IBuildIncrementalContext.Project">
            <summary>
            Project being built
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IBuildIncrementalContext.Target">
            <summary>
            Option target on the project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IBuildIncrementalContext.BuildType">
            <summary>
            The Build type being executed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IBuildIncrementalContext.BuildConfigurationContext">
            <summary>
            The selected build configuration context
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildIncrementalContext2">
            <summary>
            Interface to extend IBuildIncrementalContext
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IBuildIncrementalContext2.Properties">
            <summary>
            Custom properties
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildIncrementalProgressUpdate">
            <summary>
            Interface to support progress on the build incremental
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildIncrementalProgressUpdate.Report(Microsoft.VisualStudio.Workspace.Build.IBuildIncrementalContext,Microsoft.VisualStudio.Workspace.Build.BuildIncrementalProgressStatus,System.Object)">
            <summary>
            Report status when incremental build is in progress
            </summary>
            <param name="context">The build incremental context</param>
            <param name="status">Status progress</param>
            <param name="progressData">Optional data</param>
            <returns>Task completion</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildMessageService">
            <summary>
            Build Message Service
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IBuildMessageService.OnBuildMessagesEvent">
            <summary>
            Async event when flush messages
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildMessageService.ReportBuildMessages(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.Build.BuildMessage})">
            <summary>
            Report build messages
            </summary>
            <param name="messages">Collection of messages to report</param>
            <returns>Completion task</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildProjectsResult">
            <summary>
            Interface to return a list of IsSuccess status for a list of projects
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IBuildProjectsResult.IsSuccessResults">
            <summary>
            Success per project status
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildService">
            <summary>
            Build Service interface
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IBuildService.BeginProjectBuild">
            <summary>
            Provide per project events
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IBuildService.EndProjectBuild">
            <summary>
            Provide per project events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildService.GetBuildConfigurationContextActionsAsync(System.String,System.String,System.Guid,System.Func{Microsoft.VisualStudio.Workspace.FileContext,System.Boolean})">
            <summary>
            Get a Build Configuration Context type action
            </summary>
            <param name="projectFile">The project file context</param>
            <param name="projectFileTarget">Optional project target</param>
            <param name="contextType">The desired context type</param>
            <param name="matchBuildConfigurationContext">Callback to invoke to match a file context</param>
            <returns>File context actions that match the passed target project build configuration</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildService.GetBuildConfigurationContextActionsAsync(System.String,System.String,System.Guid,System.String)">
            <summary>
            Get a Build Configuration Context type action
            </summary>
            <param name="projectFile">The project file context</param>
            <param name="projectFileTarget">Optional project target</param>
            <param name="contextType">The desired context type</param>
            <param name="targetProjectBuildConfiguration">Optional target project build configuration</param>
            <returns>File context actions that match the passed target project build configuration</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildService.GetBuildConfigurationContextsAsync(System.String,System.String,System.Guid,System.String)">
            <summary>
            Get all file contexts that match a specific target project build configuration
            </summary>
            <param name="projectFile">The project file context</param>
            <param name="projectFileTarget">Optional project target</param>
            <param name="contextType">The desired context type</param>
            <param name="targetProjectBuildConfiguration">Optional target project build configuration</param>
            <returns>File Contexts grouped by provider</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildService.GetBuildUpToDateActionContextAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Return a valid BuildUpToDateActionContext from a project file
            </summary>
            <param name="projectFile">The project file context</param>
            <param name="projectFileTarget">Optional project target</param>
            <param name="targetProjectBuildConfiguration">Optional target project build configuration</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Null or a valid BuildUpToDateActionContext for a project file</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildService.BuildProjectAsync(System.String,System.String,System.String,System.Guid,System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)">
            <summary>
            Build a project by invoking a build context actions from a provider
            </summary>
            <param name="projectFile">The project file context</param>
            <param name="projectFileTarget">Optional project target</param>
            <param name="buildConfiguration">The build configuration</param>
            <param name="buildContextType">The desired build context type</param>
            <param name="progress">A progress monitor</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Completion task with build succeed result</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildService.BuildAsync(System.String,System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String},Microsoft.VisualStudio.Workspace.Build.IBuildConfigurationContext,Microsoft.VisualStudio.Workspace.Build.BuildType,System.Boolean,System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)">
            <summary>
            Build a project incrementally by invoking a build context actions from a provider
            </summary>
            <param name="projectFile">The project file context</param>
            <param name="projectFileTarget">Optional project target</param>
            <param name="selectedReferences">list of root project references to build, if null - all references</param>
            <param name="excludedProjects">list of excluded projects (typically user unloaded projects in solution case)</param>
            <param name="buildConfigurationContext">The build configuration context</param>
            <param name="buildType">build type (build, rebuild, etc)</param>
            <param name="enableIncrementalBuild">Enable incremental build (UTD check)</param>
            <param name="progress">A progress monitor</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Info about the incremental build</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildService.GetBuildProjectIncrementalActionAsync(System.String,System.String,Microsoft.VisualStudio.Workspace.Build.IBuildConfigurationContext,System.Threading.CancellationToken)">
            <summary>
            Get a build project action
            </summary>
            <param name="projectFile">The project file context</param>
            <param name="projectFileTarget">Optional project target</param>
            <param name="buildConfigurationContext">Build configuration context</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>The build incremental action or null if no provider support</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildService.GetDependencyBuildConfigurationAsync(System.String,System.String,Microsoft.VisualStudio.Workspace.Build.IBuildConfigurationContext,System.Threading.CancellationToken)">
            <summary>
            Get the dependency project file build configuration context
            </summary>
            <param name="projectFile">Target project to resolve the dependency</param>
            <param name="dependencyProjectFile">The dependency project from our target</param>
            <param name="buildConfigurationContext">The original build configuration context</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>A build configuration context for the target project to resolve</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildService.CreateBatchFileContextAction(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Workspace.IFileContextActionBase})">
            <summary>
            Create a File context action based on multiple known actions
            </summary>
            <param name="actions">List of actions to chain</param>
            <returns>Aggregated context action</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildService.GetProjectBuildListAsync(System.String,System.String,Microsoft.VisualStudio.Workspace.Build.IBuildConfigurationContext,System.Threading.CancellationToken)">
            <summary>
            Return a list of the projects dependencies based on a project file and optional target
            </summary>
            <param name="projectFile">The project file path</param>
            <param name="projectFileTarget">Optional project file target</param>
            <param name="buildConfigurationContext">A build configuration context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>List of projects involved in this dependency graph</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildService.CreateBuildProjectIncrementalAction(System.String,System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String},Microsoft.VisualStudio.Workspace.Build.IBuildConfigurationContext,Microsoft.VisualStudio.Workspace.Build.BuildType,System.Boolean)">
            <summary>
            Create a build project incremental action
            </summary>
            <param name="projectFile">The project file context</param>
            <param name="projectFileTarget">Optional project target</param>
            <param name="selectedReferences">list of root project references to build, if null - all references</param>
            <param name="excludedProjects">list of excluded projects (typically user unloaded projects in solution case)</param>
            <param name="buildConfigurationContext">The build configuration context</param>
            <param name="buildType">build type (build, rebuild, etc)</param>
            <param name="enableIncrementalBuild">Enable incremental build (UTD check)</param>
            <returns>A file context action that is able to build incremental</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildService2">
            <summary>
            Interface IBuildService2 extension of IBuildService
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildService2.BuildAsync(Microsoft.VisualStudio.Workspace.Build.BuildRequest,System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)">
            <summary>
            Build a project incrementally by invoking a build context actions from a provider
            </summary>
            <param name="buildRequest">The build request entity</param>
            <param name="progress">A progress monitor</param>
            <param name="cancellationToken">Optional cancellation token</param>
            <returns>Info about the incremental build</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildService2.GetProjectBuildListAsync(Microsoft.VisualStudio.Workspace.Build.BuildListRequest,System.Threading.CancellationToken)">
            <summary>
            Return the dependency graph of a build request
            </summary>
            <param name="buildListRequest">A build list request info</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task completion with dependency graph info</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildService3">
            <summary>
            Interface IBuildService3 extension of IBuildService
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildService3.GetBuildConfigurationContextActionsAsync``1(System.String,``0,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the actions available on a workspace context
            </summary>
            <typeparam name="T">Type of the context</typeparam>
            <param name="projectFile">The path to the project</param>
            <param name="context">The file context</param>
            <param name="contextType">The desired context type</param>
            <param name="targetProjectBuildConfiguration">Target project build configuration</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns>File context actions that match the passed target project build configuration</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildService3.GetBuildConfigurationContextActionsAsync``1(System.String,``0,System.Guid,System.Func{Microsoft.VisualStudio.Workspace.FileContext,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets the actions available on a workspace context
            </summary>
            <typeparam name="T">Type of the context</typeparam>
            <param name="projectFile">The path to the project</param>
            <param name="context">The file context</param>
            <param name="contextType">The context types</param>
            <param name="matchBuildConfigurationContext">Callback to invoke to match a file context</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns>File context actions that match the passed target project build configuration</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildUpToDateCheckProvider">
            <summary>
            interface IBuildUpToDateCheckProvider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildUpToDateCheckProvider.IsUpToDateAsync(System.String,System.String,Microsoft.VisualStudio.Workspace.Build.IBuildConfigurationContext,System.String,System.Threading.CancellationToken)">
            <summary>
            Check if project file is up to date based on a build configuration
            </summary>
            <param name="projectFile">The project file to evaluate</param>
            <param name="projectFileTarget">Optional target in the project</param>
            <param name="buildConfigurationContext">Optional build configuration context</param>
            <param name="buildConfiguration">An optional build configuration</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>true of if the project file is up to date or false otherwise</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildUpToDateCheckProvider2">
            <summary>
            Interface IBuildUpToDateCheckProvider2
            Note: this is an alternative callback to IBuildUpToDateCheckProvider that provide
            access to the IDependencyBuildConfigurationContext context and so resolve multiple
            build configuration dependencies
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IBuildUpToDateCheckProvider2.IsUpToDateAsync(System.String,System.String,Microsoft.VisualStudio.Workspace.Build.IDependencyBuildConfigurationContext,System.Threading.CancellationToken)">
            <summary>
            Check if project file is up to date based on a build configuration
            </summary>
            <param name="projectFile">The project file to evaluate</param>
            <param name="projectFileTarget">Optional target in the project</param>
            <param name="dependencyBuildConfigurationContext">IDependencyBuildConfigurationContext instance</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>true of if the project file is up to date or false otherwise</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IBuildUpToDateCheckProviderMetadata">
            <summary>
            IBuildUpToDateCheckProviderMetadata interface
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IBuildUpToDateCheckProviderMetadata.Options">
            <summary>
            Provider options
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IDependencyBuildConfigurationContext">
            <summary>
            Interface to retrieve a dependency build configuration
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.IDependencyBuildConfigurationContext.GetDependencyBuildConfigurationAsync(Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceData,System.String,System.Threading.CancellationToken)">
            <summary>
            Resolve a build configuration dependency
            </summary>
            <param name="indexWorkspaceData">Optional index workspace data</param>
            <param name="dependencyProjectFile">Path to dependency project to resolve</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Completion task</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.IProjectBuild">
            <summary>
            IProjectBuild interface
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IProjectBuild.ProjectFile">
            <summary>
            The project file to build
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IProjectBuild.FilePath">
            <summary>
            The full path of the project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IProjectBuild.UpToDateAction">
            <summary>
            Up to Date action
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IProjectBuild.ProjectReferences">
            <summary>
            References
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.IProjectBuild.ProjectDependencies">
            <summary>
            Dependencies
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.ProjectBuildBeginEvent">
            <summary>
            Event fires when project begin building
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.ProjectBuildBeginEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.ProjectBuildBeginEvent"/> class.
            </summary>
            <param name="projectFullPath">full path to the project file we are building</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.ProjectBuildBeginEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.ProjectBuildBeginEvent"/> class.
            </summary>
            <param name="projectFullPath">full path to the project file we are building</param>
            <param name="buildConfiguration">The build configuration active for this project</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.ProjectBuildBeginEvent.ProjectMoniker">
            <summary>
            Project moniker (usually the full path of the project file)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.ProjectBuildBeginEvent.BuildConfiguration">
            <summary>
            The build configuration for this project
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.BuildResult">
            <summary>
            Defines the build outcome
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildResult.Succeeded">
            <summary>
            build succeeded
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildResult.UpToDate">
            <summary>
            project was up to date and not built.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildResult.Failed">
            <summary>
            build failed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Build.BuildResult.Canceled">
            <summary>
            build was canceled
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Build.ProjectBuildEndEvent">
            <summary>
            Event fires when project building is completed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.ProjectBuildEndEvent.#ctor(System.String,Microsoft.VisualStudio.Workspace.Build.BuildResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.ProjectBuildEndEvent"/> class.
            </summary>
            <param name="projectFullPath">full path to the project file we are building</param>
            <param name="buildResult">build outcome</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Build.ProjectBuildEndEvent.#ctor(System.String,System.String,Microsoft.VisualStudio.Workspace.Build.BuildResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Build.ProjectBuildEndEvent"/> class.
            </summary>
            <param name="projectFullPath">full path to the project file we are building</param>
            <param name="buildConfiguration">The build configuration active for this project</param>
            <param name="buildResult">build outcome</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.ProjectBuildEndEvent.ProjectMoniker">
            <summary>
            Project moniker (usually the full path of the project file)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.ProjectBuildEndEvent.BuildConfiguration">
            <summary>
            The build configuration for this project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Build.ProjectBuildEndEvent.Result">
            <summary>
            Build outcome.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ContentTypes.IWorkspaceContentTypeService">
            <summary>
            Workspace Item Filter service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ContentTypes.IWorkspaceContentTypeService.GetFileContentType(System.String)">
            <summary>
            Gets the Item Filter object for the given filterKey.
            </summary>
            <param name="fullPath"> the file content type</param>
            <returns>item filter object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ContentTypes.IWorkspaceContentTypeService.GetContetTypeProperties(System.String,System.String)">
            <summary>
            Get properties associated with this content type
            </summary>
            <param name="contentType">the content type id</param>
            <param name="scope">the workspace scope</param>
            <returns>the settings defining this content type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ContentTypes.IWorkspaceContentTypeService.GetDefinedContentTypes(System.String)">
            <summary>
            Get the list of defined content types.
            </summary>
            <param name="scope">workspace scope</param>
            <returns>the list of content types we have definitions on</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ContentTypes.IWorkspaceFileWithContentType">
            <summary>
            Represent a file classification based on content type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ContentTypes.IWorkspaceFileWithContentType.FilePath">
            <summary>
            the file full path
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ContentTypes.IWorkspaceFileWithContentType.ContentType">
            <summary>
            the content type (aka C++/text/C# etc)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ContentTypes.IWorkspaceFileWithContentType.IsMatch(Microsoft.VisualStudio.Workspace.IFileSelectorMetadata)">
            <summary>
            Check if the file satisfy the selector criteria
            </summary>
            <param name="selector">the file selector</param>
            <returns>true if file applies</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.CustomContexts.CustomConfigurationConstants">
            <summary>
            Custom Configuration Constants
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.CustomContexts.CustomConfigurationConstants.TasksJsonFileName">
            <summary>
            task.json name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.CustomContexts.CustomConfigurationConstants.Type">
            <summary>
            'type' key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.CustomContexts.CustomConfigurationConstants.TasksKey">
            <summary>
            'tasks' key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.CustomContexts.CustomConfigurationConstants.TaskNameKey">
            <summary>
            'taskName' key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.CustomContexts.CustomConfigurationConstants.TaskLabelKey">
            <summary>
            'taskLabel' key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.CustomContexts.CustomConfigurationConstants.AppliesToKey">
            <summary>
            'appliesTo' key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.CustomContexts.CustomConfigurationConstants.InheritEnvironmentsKey">
            <summary>
            'inheritEnvironments' key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.CustomContexts.CustomConfigurationConstants.ContextTypeKey">
            <summary>
            Type of context being exposed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.CustomContexts.CustomConfigurationConstants.OutputKey">
            <summary>
            'output' key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.CustomContexts.CustomConfigurationConstants.VersionKey">
            <summary>
            Defaults Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.CustomContexts.CustomConfigurationConstants.JsonVersion">
            <summary>
            Json version Value
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.CustomContexts.CustomConfigurationConstants.EnvVarsKey">
            <summary>
            EnvVars key (deprecated)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.CustomContexts.CustomConfigurationConstants.EnvKey">
            <summary>
            Env key
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.CustomContexts.CustomFileContextProviderOptions">
            <summary>
            Options for IFileContextProvider
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.CustomContexts.CustomFileContextProviderOptions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.CustomContexts.CustomSettingsHelper">
            <summary>
            Helpers for a Custom settings entry
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.CustomContexts.CustomSettingsHelper.GetFileContextType(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSource)">
            <summary>
            Return the file context type from a custom settings
            </summary>
            <param name="customSettings">The custom settings source</param>
            <returns>GUID with the parsed file context type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.CustomContexts.CustomSettingsHelper.GetTaskLabelName(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSource)">
            <summary>
            Return the task label of a custom settings entry
            </summary>
            <param name="customSettings">The custom settings source</param>
            <returns>The Task label name of the custom settings</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.CustomContexts.ExportCustomFileContextProvider2Attribute">
            <summary>
            MEF export helper for ILaunchConfigurationProviderMetadata
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.CustomContexts.ExportCustomFileContextProvider2Attribute.#ctor(Microsoft.VisualStudio.Workspace.CustomContexts.CustomFileContextProviderOptions,System.String,System.String[],System.String[],System.String,Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.CustomContexts.ExportCustomFileContextProvider2Attribute"/> class.
            </summary>
            <param name="options">Provider options</param>
            <param name="type">The unique type for this <see cref="T:Microsoft.VisualStudio.Workspace.IProviderMetadataBase"/></param>
            <param name="contentTypes">List of content types to handle</param>
            <param name="filesFilters">Anonymous content type definition (glob patterns)</param>
            <param name="customJsonSchemaContent">Custom Json schema content</param>
            <param name="priority">File scanner priority</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.CustomContexts.ExportCustomFileContextProviderAttribute">
            <summary>
            MEF export helper for ILaunchConfigurationProviderMetadata
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.CustomContexts.ExportCustomFileContextProviderAttribute.#ctor(Microsoft.VisualStudio.Workspace.CustomContexts.CustomFileContextProviderOptions,System.String,System.String[],System.String,Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.CustomContexts.ExportCustomFileContextProviderAttribute"/> class.
            </summary>
            <param name="options">Provider options</param>
            <param name="type">The unique type for this <see cref="T:Microsoft.VisualStudio.Workspace.IProviderMetadataBase"/></param>
            <param name="supportedFileExtensions">The supported file extension</param>
            <param name="customJsonSchemaContent">Custom Json schema content</param>
            <param name="priority">File scanner priority</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.CustomContexts.ExportCustomFileContextProviderAttribute.#ctor(Microsoft.VisualStudio.Workspace.CustomContexts.CustomFileContextProviderOptions,System.String,System.String[],System.String[],System.String,Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.CustomContexts.ExportCustomFileContextProviderAttribute"/> class.
            </summary>
            <param name="options">Provider options</param>
            <param name="type">The unique type for this <see cref="T:Microsoft.VisualStudio.Workspace.IProviderMetadataBase"/></param>
            <param name="contentTypes">List of content types to handle</param>
            <param name="filesFilters">Anonymous content type definition (glob patterns)</param>
            <param name="customJsonSchemaContent">Custom Json schema content</param>
            <param name="priority">File scanner priority</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.CustomContexts.ExportCustomFileContextProviderAttribute.Options">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.CustomContexts.ExportCustomFileContextProviderAttribute.CustomJsonSchemaContent">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.CustomContexts.ExportCustomFileContextProviderAttribute.OptionFlagsInternal">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.CustomContexts.ICustomContextService">
            <summary>
            Interface to access custom context services
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.CustomContexts.ICustomContextService.OnCustomSettingsChanged">
            <summary>
            Notifies when the custom settings has changed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.CustomContexts.ICustomContextService.GetCustomContextSchemaContent(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Workspace.CustomContexts.ICustomFileContextProviderMetadata})">
            <summary>
            Return the Schema Content for all the combined custom providers
            </summary>
            <param name="providersMetadata">Providers metadata</param>
            <returns>JSON content of the combined schema</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.CustomContexts.ICustomContextService.CustomizeCustomFileContextSettings(System.String,Microsoft.VisualStudio.Workspace.CustomContexts.ICustomFileContextProvider[])">
            <summary>
            Customize the file context settings for a file path
            </summary>
            <param name="filePath">File path to customize</param>
            <param name="customFileContextProviders">list of providers to use</param>
            <returns>Result info with JSON content and created items</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.CustomContexts.ICustomContextService2">
            <summary>
            Extension to interface ICustomContextService
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.CustomContexts.ICustomContextService2.ValidateTaskSettingsAsync(System.String)">
            <summary>
            Validate a JSON content of a tasks.vs.json file by validating all the task items
            </summary>
            <param name="jsonContent">The JSON content to validate</param>
            <returns>Collection of BuildErrors to validate</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.CustomContexts.ICustomFileContextProvider">
            <summary>
            Interface to allow customize settings to a file context
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.CustomContexts.ICustomFileContextProvider.CustomizeFileContext(System.String,Microsoft.VisualStudio.Workspace.IPropertySettings)">
            <summary>
            Customize the context
            </summary>
            <param name="filePath">File path of the customized context</param>
            <param name="customSettings">The settings to fill with some default values</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.CustomContexts.ICustomFileContextProviderMetadata">
            <summary>
            Metadata interface to export custom file contexts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.CustomContexts.ICustomFileContextProviderMetadata.Options">
            <summary>
            Provider options
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.CustomContexts.ICustomFileContextProviderMetadata.CustomJsonSchemaContent">
            <summary>
            The customized json schema
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext">
            <summary>
            A Debugger Launch Action context
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext.ContextType">
            <summary>
            Identifies an action context that launches a debug session.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext.IsDefaultStartupProjectEntry">
            <summary>
            Startup Project name entry
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext.ContextTypeGuid">
            <summary>
            Identifies an action context that launches a debug session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext.#ctor(System.String,Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProvider,Microsoft.VisualStudio.Workspace.ProjectTargetFileContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext"/> class.
            </summary>
            <param name="targetPath">Debug target path</param>
            <param name="provider">Provider to launch this context</param>
            <param name="projectFileContext">The target project file context</param>
            <param name="buildConfiguration">Build Configuration setting</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext.#ctor(Microsoft.VisualStudio.Workspace.IPropertySettings,Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProvider,Microsoft.VisualStudio.Workspace.ProjectTargetFileContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext"/> class.
            </summary>
            <param name="launchConfiguration">Launch configuration parameters</param>
            <param name="provider">Provider to launch this context</param>
            <param name="projectFileContext">The target project file context</param>
            <param name="buildConfiguration">Build Configuration setting</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext.LaunchConfiguration">
            <summary>
            Launch configuration parameters
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext.ProjectFileContext">
            <summary>
            Optional project file target
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext.LaunchDebugTarget(Microsoft.VisualStudio.Workspace.IWorkspace,System.IServiceProvider)">
            <summary>
            Launch the target using the provider being initialized
            </summary>
            <param name="workspaceContext">Workspace context</param>
            <param name="serviceProvider">The service provider</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute">
            <summary>
            MEF export helper for ILaunchConfigurationProviderMetadata
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute.#ctor(Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationProviderOptions,System.String,System.String[],System.String,System.String,System.Boolean,Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute"/> class.
            </summary>
            <param name="options">provider options</param>
            <param name="type">The unique type for this ILaunchDebugTargetProviderMetadata</param>
            <param name="supportedFileExtensions">The supported file extension</param>
            <param name="launchTypeName">Launch type name</param>
            <param name="launchJsonSchemaContent">Launch Json schema content</param>
            <param name="isRuntimeSupportContext">If Runtime support context is supported</param>
            <param name="priority">File scanner priority</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute.#ctor(System.String,System.String[],System.String,System.String,System.Boolean,Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute"/> class.
            </summary>
            <param name="type">The unique type for this ILaunchDebugTargetProviderMetadata</param>
            <param name="supportedFileExtensions">The supported file extension</param>
            <param name="launchTypeName">Launch type name</param>
            <param name="launchJsonSchemaContent">Launch Json schema content</param>
            <param name="isRuntimeSupportContext">If Runtime support context is supported</param>
            <param name="priority">File scanner priority</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute.Options">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute.LaunchTypeName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute.LaunchJsonSchemaContent">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute.IsRuntimeSupportContext">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchConfigurationProviderAttribute.OptionFlagsInternal">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchDebugTargetAttribute">
            <summary>
            DebugLaunchActionContextAttribute class to MEF export debug launch attributes
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchDebugTargetAttribute.#ctor(Microsoft.VisualStudio.Workspace.Debug.LaunchDebugTargetProviderOptions,System.String,System.String[],Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchDebugTargetAttribute"/> class.
            </summary>
            <param name="options">Provider options</param>
            <param name="type">The unique type for this ILaunchDebugTargetProviderMetadata</param>
            <param name="supportedFileExtensions">The supported file extension</param>
            <param name="priority">File scanner priority</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchDebugTargetAttribute.#ctor(System.String,System.String[],System.Boolean,Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchDebugTargetAttribute"/> class.
            </summary>
            <param name="type">The unique type for this ILaunchDebugTargetProviderMetadata</param>
            <param name="supportedFileExtensions">The supported file extension</param>
            <param name="isRuntimeSupportContext">If Runtime support context is supported</param>
            <param name="priority">File scanner priority</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchDebugTargetAttribute.Options">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchDebugTargetAttribute.IsRuntimeSupportContext">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ExportLaunchDebugTargetAttribute.OptionFlagsInternal">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.IDebugContextAction">
            <summary>
            Specialized Context action to debug that support a build step action
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.IDebugContextAction.BuildStep">
            <summary>
            A build step action to invoke before the debug action is executed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.IDebugContextBuildFailedProgress">
            <summary>
            Debug Context progress update
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.IDebugContextBuildFailedProgress.ContinueDebugging">
            <summary>
            Controls whether the debugging experience should continue or not
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.ILaunchConfigurationProvider">
            <summary>
            ILaunchConfigurationProvider interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ILaunchConfigurationProvider.IsDebugLaunchActionSupported(Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext)">
            <summary>
            If a project file is being supported by this launch configuration provider
            </summary>
            <param name="debugLaunchActionContext">Debug Launch Action context</param>
            <returns>true if this context is being supported for this provider</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ILaunchConfigurationProvider.CustomizeLaunchConfiguration(Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext,Microsoft.VisualStudio.Workspace.IPropertySettings)">
            <summary>
            Create a launch configuration settings for a project file
            </summary>
            <param name="debugLaunchActionContext">Debug Launch Action context</param>
            <param name="launchSettings">The launch settings instance</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.ILaunchConfigurationProviderMetadata">
            <summary>
            ILaunchConfigurationProviderMetadata interface
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ILaunchConfigurationProviderMetadata.Options">
            <summary>
            Provider options
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ILaunchConfigurationProviderMetadata.LaunchTypeName">
            <summary>
            Launch type name
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ILaunchConfigurationProviderMetadata.LaunchJsonSchemaContent">
            <summary>
            The launch json schema
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ILaunchConfigurationProviderMetadata.IsRuntimeSupportContext">
            <summary>
            If Context support is being resolved on runtime or only by its static metadata
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugService">
            <summary>
            Define debug services to be available trough IServiceProvider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugService.GetLaunchDebugTargetProviders(System.String,Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProvider@)">
            <summary>
            Return a debug target provider for a file path
            </summary>
            <param name="filePath">The file path of that target</param>
            <param name="provider">A provider that is capable to launch the target being passed</param>
            <returns>true if the target provider is being found</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugService2">
            <summary>
            Interface ILaunchDebugService2 extension of ILaunchDebugService
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugService2.GetLaunchDebugTargetProviderByTemplate(Microsoft.VisualStudio.Workspace.ProjectConfiguration,Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProvider@)">
            <summary>
            Return a debug target provider for a <paramref name="projectConfiguration"/>
            </summary>
            <param name="projectConfiguration">The project configuration</param>
            <param name="provider">A provider that is capable to launch the target being passed</param>
            <returns>true if the target provider is being found</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProvider">
            <summary>
            IDebugLaunchActionContext interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProvider.LaunchDebugTarget(Microsoft.VisualStudio.Workspace.IWorkspace,System.IServiceProvider,Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext)">
            <summary>
            Launch a Debug Context
            </summary>
            <param name="workspaceContext">Workspace context</param>
            <param name="serviceProvider">The service provider context</param>
            <param name="debugLaunchActionContext">The Debug context to launch</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProvider.SupportsContext(Microsoft.VisualStudio.Workspace.IWorkspace,System.String)">
            <summary>
            If this context is supported for this Provider
            </summary>
            <param name="workspaceContext">Workspace context</param>
            <param name="targetFilePath">A file workspace</param>
            <returns>true if this provider is able to handle this context</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProvider2">
            <summary>
            IDebugLaunchActionContext interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProvider2.SupportsProjectConfiguration(Microsoft.VisualStudio.Workspace.IWorkspace,Microsoft.VisualStudio.Workspace.ProjectConfiguration)">
            <summary>
            If the project configuration is supported by this provider.
            </summary>
            <param name="workspace">Workspace</param>
            <param name="projectConfiguration">A ProjectConfiguration</param>
            <returns>true if this provider is able to handle this ProjectConfiguration</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProviderMetadata">
            <summary>
            ILaunchDebugTargetProviderMetadata interface
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProviderMetadata.Options">
            <summary>
            Provider options
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.ILaunchDebugTargetProviderMetadata.IsRuntimeSupportContext">
            <summary>
            If the provider is capable to handle context
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService">
            <summary>
            IProjectConfigurationManager interface
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService.OnPropertyChanged">
            <summary>
            To receive notifications when properties in this are changed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService.OnBuildConfigurationChanged">
            <summary>
            Build configuration changed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService.AllProjectFileConfigurations">
            <summary>
            All project file configurations from the different sources
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService.CurrentProject">
            <summary>
            Get the Current Project
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService.SetCurrentProject(Microsoft.VisualStudio.Workspace.ProjectTargetFileContext,System.String)">
            <summary>
            Set an Active Current Project
            </summary>
            <param name="projectFileContext">The project file context</param>
            <param name="name">Optional project configuration name</param>
            <returns>Task completion</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService.SetStartupProject(Microsoft.VisualStudio.Workspace.ProjectTargetFileContext,System.Boolean)">
            <summary>
            Add or Remove a Startup project File
            </summary>
            <param name="projectFileContext">The project file context</param>
            <param name="add">if add or remove is desired</param>
            <returns>Task to monitor completion</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService.UpdateCurrentProjectActions">
            <summary>
            Update the current project actions
            </summary>
            <returns>Task completion</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService.GetProjectFileConfiguration(Microsoft.VisualStudio.Workspace.ProjectTargetFileContext,System.String,System.String@)">
            <summary>
            Retrieve project configuration for a Project File
            </summary>
            <param name="projectFileContext">The project file context</param>
            <param name="name">Optional name of the configuration</param>
            <param name="activeBuildConfiguration">The Active build configuration</param>
            <returns>A project file settings instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService.GetBuildConfigurations(Microsoft.VisualStudio.Workspace.ProjectTargetFileContext)">
            <summary>
            Return all build configurations for a project file
            </summary>
            <param name="projectFileContext">The project file context</param>
            <returns>list of build configurations or null if not found</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService.GetActiveProjectBuildConfiguration(Microsoft.VisualStudio.Workspace.ProjectTargetFileContext)">
            <summary>
            Get active build configuration
            </summary>
            <param name="projectFileContext">The project file context</param>
            <returns>The active build configuration</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService.CreateCompositeLaunchSettings(Microsoft.VisualStudio.Workspace.ProjectTargetFileContext,Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext,Microsoft.VisualStudio.Workspace.IPropertySettings[])">
            <summary>
            Create Debug launch settings for a project file
            </summary>
            <param name="projectFileContext">The project file context</param>
            <param name="debugLaunchActionContext">Debug Launch Action context</param>
            <param name="launchSettings">list of launch settings to composite</param>
            <returns>A Composite launch settings</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService.CreateBuildProjectIncrementalAction(Microsoft.VisualStudio.Workspace.ProjectTargetFileContext,Microsoft.VisualStudio.Workspace.Build.IBuildConfigurationContext,Microsoft.VisualStudio.Workspace.IFileContextAction)">
            <summary>
            Return a build action based on an existing build action context
            </summary>
            <param name="projectFileContext">The target project file context</param>
            <param name="buildConfigurationContext">The build configuration context</param>
            <param name="defaultBuildContextAction">The default build context action</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService.CustomizeLaunchSettings(Microsoft.VisualStudio.Workspace.ProjectTargetFileContext,System.Boolean,System.Boolean)">
            <summary>
            Customize a launch settings to a project file
            </summary>
            <param name="projectFileContext">The project file context</param>
            <param name="allowDuplicate">If duplication is allowed for project names</param>
            <param name="updateContent">if the launch.json content will be updated on disk</param>
            <returns>Context position where the launch configuration section is being placed</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService2">
            <summary>
            Extension for interface IProjectConfigurationService
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService2.RefreshIndexedProjectsAsync">
            <summary>
            Refresh all the indexed project we keep track
            </summary>
            <returns>Completion task</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService2.CreateCompositeLaunchSettingsAsync(Microsoft.VisualStudio.Workspace.ProjectTargetFileContext,Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext,Microsoft.VisualStudio.Workspace.IPropertySettings[])">
            <summary>
            Create a composite settings instance
            </summary>
            <param name="projectFileContext">The project file context</param>
            <param name="debugLaunchActionContext">Debug Launch Action context</param>
            <param name="launchSettings">list of launch settings to composite</param>
            <returns>A Composite launch settings</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService2.ValidateLaunchSettingsAsync(System.String)">
            <summary>
            Validate a JSON content of a launch.vs.json
            </summary>
            <param name="jsonContent">The JSON content to validate</param>
            <returns>Collection of BuildErrors to validate</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService2.CreateContextSettings(Microsoft.VisualStudio.Workspace.IPropertySettings,Microsoft.VisualStudio.Workspace.Evaluator.IConfiguredPropertyEvaluator)">
            <summary>
            Creates property settings with attached evaluator.
            The object returned will implement IPropertyEvaluatorHost.
            </summary>
            <param name="settings">generic settings</param>
            <param name="evaluator">the configured evaluator</param>
            <returns>Settings with evaluator</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Debug.IProjectConfigurationService2.CustomizeLaunchSettingsAsync(System.String,Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings,Microsoft.VisualStudio.Workspace.ProjectTargetFileContext,System.Boolean,System.Boolean)">
            <summary>
            Customize a launch settings to a project file
            </summary>
            <param name="debuggerType">debugger template id (can be null)</param>
            <param name="selectedContent">initial content from template</param>
            <param name="projectFileContext">The project file context</param>
            <param name="allowDuplicate">If duplication is allowed for project names</param>
            <param name="updateContent">if the launch.json content will be updated on disk</param>
            <returns>Context position where the launch configuration section is being placed</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants">
            <summary>
            Launch Configuration Constants
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.LaunchJsonFileName">
            <summary>
            Launch json file name
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.NameKey">
            <summary>
            Name key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.ProjectKey">
            <summary>
            Project Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.ProjectTargetKey">
            <summary>
            Project target Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TypeKey">
            <summary>
            Type Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TargetKey">
            <summary>
            Target Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.InheritEnvironmentsKey">
            <summary>
            Inherit Environments Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.DebugTypeKey">
            <summary>
            Debug Type key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.NativeOptionKey">
            <summary>
            Native option key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.ManagedOptionKey">
            <summary>
            Native option key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.ArgsKey">
            <summary>
            Arguments Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.EnvKey">
            <summary>
            Environment Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.CurrentDirKey">
            <summary>
            Current Directory Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.RemoteMachineKey">
            <summary>
            Remote machine key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.ProgramKey">
            <summary>
            Program key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.PortNameKey">
            <summary>
            Port name key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.DebugEngineKey">
            <summary>
            Debug engine key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.StopOnEntryKey">
            <summary>
            Stop on entry option key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.NoDebugKey">
            <summary>
            No Debug key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.ConfigurationsKey">
            <summary>
            Configurations Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.BuildConfigurationsKey">
            <summary>
            Build Configurations Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.DefaultsKey">
            <summary>
            Defaults Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.VersionKey">
            <summary>
            Defaults Key
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.LaunchJsonVersion">
            <summary>
            Launch Json version Value
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TemplateSettingsKey">
            <summary>
            Json element name for settings based debugger templates.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TemplateDebugEngineKey">
            <summary>
            Templates visual studio debugger engine guid.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TemplateSelectorsKey">
            <summary>
            JSon element that contains the array for templates for the given debugger.
            all of these will be displayed in Select debugger dialog.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TemplateSelectorIdKey">
            <summary>
            Unique identifier for a extension template.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TemplateDisplayName">
            <summary>
            Template display name key.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TemplateDescription">
            <summary>
            Template description key.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TemplateInitialConfiguration">
            <summary>
            The initial content to add to launch.vs.json when creating a new launch entry from the selected template.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TemplatePriority">
            <summary>
            Priority of the template.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TemplateFilePatterns">
            <summary>
            Priority of the template.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TemplateDebugInfoGroupName">
            <summary>
            dedicated evaluation namespace for runtime launch configuration.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TemplateDebugInfoDefaultsKey">
            <summary>
            section key name where templates can provide a default values for runtime evaluation properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TemplateCustomParametersKey">
            <summary>
            custom parameters definition section in debug template.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TemplateSchemaKey">
            <summary>
            Json schema
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TemplateCustomParameterExtendedSchemaValueKey">
             <summary>
             the value property when custom parameter is defined with extended schema.
             aka:
            
             "Exe" : {
                 "value" : "${debugInfo.target}",
                 "required" : true
             }
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationConstants.TemplateCustomParameterExtendedSchemaRequiredKey">
            <summary>
            Custom parameter extended schema key specifying that template requires a non empty value for that parameter.
            A dedicated error is generated if the evaluated value for that parameter at runtime is null or empty.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationProviderOptions">
            <summary>
            Options for IFileContextProvider
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchConfigurationProviderOptions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Debug.LaunchDebugTargetProviderOptions">
            <summary>
            Options for ILaunchDebugTargetProvider
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchDebugTargetProviderOptions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Debug.LaunchDebugTargetProviderOptions.IsRuntimeSupportContext">
            <summary>
            If runtime support context is wanted
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.EvaluationError">
            <summary>
            Evaluation error instance returned when using the Evaluation service API
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.EvaluationError.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Evaluator.EvaluationError"/> class.
            </summary>
            <param name="variableName">name of the variable that fails to evaluate</param>
            <param name="startPosition">Start position of the error</param>
            <param name="endPosition">End position of the error</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.EvaluationError.VariableName">
            <summary>
            Start position where the error is found
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.EvaluationError.StartPosition">
            <summary>
            Start position where the error is found
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.EvaluationError.EndPosition">
            <summary>
            End position where the error is found
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.EvaluationResult">
            <summary>
            Represent an evaluation result
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.EvaluationResult.#ctor(System.Boolean,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Workspace.Evaluator.EvaluationError})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Evaluator.EvaluationResult"/> class.
            </summary>
            <param name="isSuccess">if success</param>
            <param name="content">Content evaluated</param>
            <param name="errors">Collection of errors found</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.EvaluationResult.IsSuccess">
            <summary>
            If evaluation succeed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.EvaluationResult.Content">
            <summary>
            The evaluated content
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.EvaluationResult.Errors">
            <summary>
            Collection of errors found on the evaluation
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorConstant">
            <summary>
            Constant defined in the Evaluation namespace
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorConstant.EnvironmentNamespace">
            <summary>
            The environment namespace
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorConstant.FileWorkspaceType">
            <summary>
            The File workspace type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorConstant.PropertySettingsType">
            <summary>
            The Property settings type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorConstant.WorkspaceSettingsSourceType">
            <summary>
            The Workspace settings source type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorConstant.PropertyGroupIndexedType">
            <summary>
            The Property Variable type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorConstant.EnvironmentVariableType">
            <summary>
            The environment variable type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorConstant.ProjectConfigurationType">
            <summary>
            The project configuration type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorConstant.FileWorkspaceTypeGuid">
            <summary>
            The File workspace GUID type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorConstant.PropertySettingsTypeGuid">
            <summary>
            The Property settings GUID type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorConstant.PropertyGroupIndexedTypeGuid">
            <summary>
            The Property Variable GUID type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorConstant.WorkspaceSettingsSourceTypeGuid">
            <summary>
            The Workspace settings source GUID type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorConstant.EnvironmentVariableTypeGuid">
            <summary>
            The environment variable GUID type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorConstant.ProjectConfigurationTypeGuid">
            <summary>
            The project configuration GUID type
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorHelper">
            <summary>
            Helpers defined for the Evaluator namespace
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorHelper.GetPropertyAndNamespace(System.String)">
            <summary>
            Return the namespace name of a value
            </summary>
            <param name="value">Value in the form of namespace.value</param>
            <returns>Info of namespace and name</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorHelper.EvaluateVariable(Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorService,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Tuple{Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluator,Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorMetadata}[])">
            <summary>
            Evaluate a single property
            </summary>
            <param name="propertyEvaluatorService">The evaluation service</param>
            <param name="prefixNamespace">Optional namespace</param>
            <param name="name">Name of the variable</param>
            <param name="filePath">The file path</param>
            <param name="inheritEnvironments">Optional inherit environments to pass</param>
            <param name="localPropertyEvaluators">Optional property evaluators</param>
            <returns>Info on the evaluation result</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.EvaluatorHelper.EvaluateNoError(Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorService,System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Tuple{Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluator,Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorMetadata}[])">
            <summary>
            Evaluate a content and return the partial evaluation ignoring any possible error
            </summary>
            <param name="propertyEvaluatorService">The evaluation service</param>
            <param name="content">Content to be evaluated</param>
            <param name="filePath">The file path</param>
            <param name="inheritEnvironments">Optional contexts to pass</param>
            <param name="localPropertyEvaluators">Optional property evaluators</param>
            <returns>Content of evaluation result</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.ExportPropertyEvaluatorAttribute">
            <summary>
            Export attribute for a IPropertyEvaluator
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.ExportPropertyEvaluatorAttribute.#ctor(System.String,System.String[],Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Evaluator.ExportPropertyEvaluatorAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IProviderMetadataBase</param>
            <param name="supportedNamespaces">List of supported namespaces</param>
            <param name="priority">Priority of this provider</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.ExportPropertyEvaluatorAttribute.SupportedNamespaces">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.ExportPropertyEvaluatorAttribute.OptionFlagsInternal">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.GroupDefaultOptions">
            <summary>
            Define Property group default options
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.GroupDefaultOptions.Namespace">
            <summary>
            Default namespace
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.GroupDefaultOptions.FileMatcher">
            <summary>
            Default scope
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.GroupDefaultOptions.Environment">
            <summary>
            Default environment
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.GroupDefaultOptions.GroupPriority">
            <summary>
            Default group priority
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.IConfiguredPropertyEvaluator">
            <summary>
            IConfiguredPropertyEvaluator
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.IConfiguredPropertyEvaluator.EvaluatorService">
            <summary>
            the Property evaluator service
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.IConfiguredPropertyEvaluator.Evaluate(System.String)">
            <summary>
            Evaluate a content and resolve all possible ${prefix.var} instances found
            </summary>
            <param name="content">the string to evaluate</param>
            <returns>An evaluation result instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.IConfiguredPropertyEvaluator.CreateConfiguredPropertyEvaluator(System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IEnumerable{System.Tuple{Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluator,Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorMetadata}})">
            <summary>
            Create a new IConfiguredPropertyEvaluator by up adding new contexts and/or property providers.
            </summary>
            <param name="inheritEnvironments">Optional collection of contexts to pass to providers</param>
            <param name="localPropertyEvaluators">Local scope property valuators</param>
            <returns>the updated IConfiguredPropertyEvaluator object</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluator">
            <summary>
            Represent a provider that is able to resolve properties
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluator.GetProperties(System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Return the properties that are available for a namespace
            </summary>
            <param name="prefixNamespaceFilter">The prefix namespace to filter</param>
            <param name="inheritEnvironments">Optional inherit environments</param>
            <returns>Collection of properties that this provider is able to support</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluator.GetMatchProperties(Microsoft.VisualStudio.Workspace.Evaluator.PropertyContext)">
            <summary>
            Return the matches found on a property context
            </summary>
            <param name="propertyContext">The property context</param>
            <returns>Collection of matches</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorHost">
            <summary>
            IPropertyEvaluatorHost
            Implemented by object (usually collections) that support automatic property
            evaluation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorHost.Evaluator">
            <summary>
            Objects evaluator.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorMetadata">
            <summary>
            Represent the metadata of a provider that is able to resolve the value of a property
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorMetadata.SupportedNamespaces">
            <summary>
            List of supported namespaces
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorService">
            <summary>
            Interface to expose a service that is able to evaluate a content and resolve all their ${prefix.Var}
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorService.OnPropertyVariablesChanged">
            <summary>
            Notifies when property variables are changed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorService.GetPropertyEvaluators(System.String)">
            <summary>
            Return the providers that match a filter criteria
            </summary>
            <param name="prefixNamespace">The namespace</param>
            <returns>Collection of property evaluators</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorService.GetProperties(System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Get all properties that are available for a namespace and context
            </summary>
            <param name="prefixNamespace">The namespace</param>
            <param name="inheritEnvironments">Optional context</param>
            <returns>Collection of possible properties</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorService.SelectPropertyEvaluators(Microsoft.VisualStudio.Workspace.Evaluator.PropertyContext,System.Collections.Generic.IEnumerable{System.Tuple{Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluator,Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorMetadata}})">
            <summary>
            Return the matching properties for a property context
            </summary>
            <param name="propertyContext">The property context to filter</param>
            <param name="localPropertyEvaluators">Optional property evaluators</param>
            <returns>Collection of match property results</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorService.Evaluate(System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IEnumerable{System.Tuple{Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluator,Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorMetadata}})">
            <summary>
            Evaluate a content and resolve all possible ${prefix.var} instances found
            </summary>
            <param name="content">Content data to look</param>
            <param name="fileScopePath">The file scope context</param>
            <param name="inheritEnvironments">Optional collection of environments to pass to providers</param>
            <param name="localPropertyEvaluators">Local scope property valuators</param>
            <returns>An evaluation result instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorService.CreateConfiguredPropertyEvaluator(System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IEnumerable{System.Tuple{Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluator,Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorMetadata}})">
            <summary>
            Create a IConfiguredPropertyEvaluator that will aggragate the all available property providers.
            Useful to pass around across different consumers, that may not need to know how property provides were selected.
            </summary>
            <param name="fileScopePath">The file scope context</param>
            <param name="inheritEnvironments">Optional collection of environments to pass to providers</param>
            <param name="localPropertyEvaluators">Local scope property valuators</param>
            <returns>the updated IConfiguredPropertyEvaluator object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorService.CreatePropertySettingsEvaluator(Microsoft.VisualStudio.Workspace.IPropertySettings,System.Int32,System.Int32)">
            <summary>
            Create a property evaluator based on a IPropertySettings source
            </summary>
            <param name="source">The source settings</param>
            <param name="groupPriority">Group Priority desired</param>
            <param name="priority">Priority desired</param>
            <returns>The provider evaluator and metadata</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorService.CreateWorkspaceSettingsSourceEvaluator(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSource,System.Int32,System.Int32)">
            <summary>
            Create a property evaluator based on a IWorkspaceSettingsSource source
            </summary>
            <param name="source">The source settings</param>
            <param name="groupPriority">Group Priority desired</param>
            <param name="priority">Priority desired</param>
            <returns>The provider evaluator and metadata</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorService.CreatePropertyGroupEvaluator(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup})">
            <summary>
            Create property evaluator based on a collection of PropertyVariable(s)
            </summary>
            <param name="propertyGroups">Collection of property groups</param>
            <returns>The provider evaluator and metadata</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorService.ParsePropertyGroups(System.String,Microsoft.VisualStudio.Workspace.Evaluator.GroupDefaultOptions)">
            <summary>
            Parse a JSON content of property groups
            </summary>
            <param name="jsonPropertyGroups">JSON content with an array of property groups</param>
            <param name="defaultOptions">Group default options</param>
            <returns>Collection of property groups</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorService.ParsePropertyGroups(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSource[],Microsoft.VisualStudio.Workspace.Evaluator.GroupDefaultOptions)">
            <summary>
            Parse a collection of IWorkspaceSettingsSource
            </summary>
            <param name="propertyGroups">The property groups sources</param>
            <param name="defaultOptions">Group default options</param>
            <returns>Collection of property groups</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorService.ParsePropertyGroups(Microsoft.VisualStudio.Workspace.IPropertySettings[],Microsoft.VisualStudio.Workspace.Evaluator.GroupDefaultOptions)">
            <summary>
            Parse a collection of IPropertySettings
            </summary>
            <param name="propertyGroupArray">The property groups sources</param>
            <param name="defaultOptions">Group default options</param>
            <returns>Collection of property groups</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperties">
            <summary>
            Define matched properties to be returned by property resolver provider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperties.#ctor(System.Int32,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperties"/> class.
            </summary>
            <param name="groupPriority">The group priority</param>
            <param name="properties">Matched properties</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperties.Empty">
            <summary>
            Return an empty match
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperties.GroupPriority">
            <summary>
            Get the group priority
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperties.Properties">
            <summary>
            Collection of matched properties
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperties.GetSingleMatch(Microsoft.VisualStudio.Workspace.Evaluator.MatchProperties)">
            <summary>
            Return a single match result
            </summary>
            <param name="matchProperties">The single matched instance</param>
            <returns>Collection with the single element</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperties.GetSingleMatch(System.Int32,System.Int32,System.String)">
            <summary>
            Return a single match result
            </summary>
            <param name="groupPriority">Group priority desired</param>
            <param name="priority">Property properiority desired</param>
            <param name="value">Value of the match</param>
            <returns>Collection with the single element</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty">
            <summary>
            Define a simple entity to return a single matched property
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty"/> struct.
            </summary>
            <param name="priority">Property priority</param>
            <param name="value">Property value</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty.Priority">
            <summary>
            Get the matched priority
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty.Value">
            <summary>
            Get the matched value
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty.op_Equality(Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty,Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty)">
            <summary>
            Operator ==
            </summary>
            <param name="matchProperty1">Match property 1</param>
            <param name="matchProperty2">Match property 2</param>
            <returns>True if are the same</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty.op_Inequality(Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty,Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty)">
            <summary>
            Operator !=
            </summary>
            <param name="matchProperty1">Match property 1</param>
            <param name="matchProperty2">Match property 2</param>
            <returns>True if are different</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty.Equals(Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.MatchPropertyResult">
            <summary>
            Entity to return a Property match with a provider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.MatchPropertyResult.#ctor(System.Tuple{Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluator,Microsoft.VisualStudio.Workspace.Evaluator.IPropertyEvaluatorMetadata},Microsoft.VisualStudio.Workspace.Evaluator.MatchProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Evaluator.MatchPropertyResult"/> class.
            </summary>
            <param name="providerInfo">The provider evalutor info</param>
            <param name="property">The match property</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.MatchPropertyResult.ProviderInfo">
            <summary>
            Get the provider info
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.MatchPropertyResult.Property">
            <summary>
            Get the matched property
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.PropertyContext">
            <summary>
            Represent a property context to be evaluated
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.PropertyContext.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Evaluator.PropertyContext"/> class.
            </summary>
            <param name="filePath">The file path context where this property is being evaluated</param>
            <param name="prefixNamespace">The namespace</param>
            <param name="name">Name of property</param>
            <param name="inheritEnvironments">Optional environments</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyContext.FullName">
            <summary>
            Name with namespace
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyContext.FilePath">
            <summary>
            File path context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyContext.Namespace">
            <summary>
            Namespace of this property
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyContext.Name">
            <summary>
            The property name
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyContext.InheritedEnvironments">
            <summary>
            Optional property context
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.PropertyContext.Equals(Microsoft.VisualStudio.Workspace.Evaluator.PropertyContext)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.PropertyContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.PropertyContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup">
            <summary>
            Define a group of properties to match
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Int32,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.Evaluator.PropertyVariable})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup"/> class.
            </summary>
            <param name="groupNamespace">Namespace for this properties</param>
            <param name="globPatterns">Scope to apply</param>
            <param name="environment">Environment to apply</param>
            <param name="inheritEnvironments">Optional list of reference contexts</param>
            <param name="groupPriority">Group priority to apply</param>
            <param name="properties">Collection of properties to include</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Int32,Microsoft.VisualStudio.Workspace.Evaluator.PropertyVariable[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup"/> class.
            </summary>
            <param name="groupNamespace">Namespace for this properties</param>
            <param name="globPatterns">Scope to apply</param>
            <param name="environment">Environment to apply</param>
            <param name="inheritEnvironments">Optional list of reference contexts</param>
            <param name="groupPriority">Group priority to apply</param>
            <param name="properties">Collection of properties to include</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Int32,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup"/> class.
            </summary>
            <param name="groupNamespace">Namespace for this properties</param>
            <param name="globPatterns">comma separated glob patterns</param>
            <param name="environment">Environment to apply</param>
            <param name="inheritEnvironments">Optional list of inherit environments</param>
            <param name="groupPriority">Group priority to apply</param>
            <param name="properties">Collection of properties to include</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup.#ctor(System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Int32,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.Evaluator.PropertyVariable})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup"/> class.
            </summary>
            <param name="groupNamespace">Namespace for this properties</param>
            <param name="fileMatcherRoot">implied root for the glob patterns</param>
            <param name="globPatterns">git style glob patterns</param>
            <param name="environment">Environment to apply</param>
            <param name="inheritEnvironments">Optional list of reference contexts</param>
            <param name="groupPriority">Group priority to apply</param>
            <param name="properties">Collection of properties to include</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup.Namespace">
            <summary>
            Namespace (or null) for all this group
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup.GroupPriority">
            <summary>
            Priority to apply for this group
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup.FileMatcher">
            <summary>
            Scope of this properties to apply
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup.Environment">
            <summary>
            Environment of this properties to apply
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup.InheritEnvironments">
            <summary>
            List of reference contexts that this group needs
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup.Properties">
            <summary>
            Properties to apply
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroup.CreateFileDataValue">
            <summary>
            Create a FileDataValue to be indexed
            </summary>
            <returns>FileDataValue instance to be indexed</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroupFileMatcher">
            <summary>
            File matcher parameters
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroupFileMatcher.Root">
            <summary>
            the implied root
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyGroupFileMatcher.GlobPatterns">
            <summary>
            The git style glob patterns
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.PropertyPriority">
            <summary>
            Recommended property priorities range
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.PropertyPriority.Lowest">
            <summary>
            Lowest priority
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.PropertyPriority.BelowNormal">
            <summary>
            BelowNormal priority
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.PropertyPriority.Normal">
            <summary>
            Normal priority
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.PropertyPriority.AboveNormal">
            <summary>
            AboveNormal priority
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Evaluator.PropertyPriority.Highest">
            <summary>
            Highest priority
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.PropertyVariable">
            <summary>
            Define a property variable info
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Evaluator.PropertyVariable.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Evaluator.PropertyVariable"/> class.
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Value of this property</param>
            <param name="priority">Priority of this property</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyVariable.Name">
            <summary>
            The name of this property
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyVariable.Value">
            <summary>
            Value of this property
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Evaluator.PropertyVariable.Priority">
            <summary>
            Custom priority of this property
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Evaluator.PropertyVariablesChangedEventArgs">
            <summary>
            Class PropertyVariablesChangedEventArgs intented to notify when property varaibles has changed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute">
            <summary>
            Exports an <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextActionProvider"/> to the MEF catalog
            with metadata as described by <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextActionProviderMetadata"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute.#ctor(Microsoft.VisualStudio.Workspace.FileContextActionProviderOptions,System.String,Microsoft.VisualStudio.Workspace.ProviderPriority,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute"/> class.
            </summary>
            <param name="options">FileContextActionProvider Options</param>
            <param name="type">The unique type for this IFileContextActionProviderMetadata</param>
            <param name="priority">The provider priority</param>
            <param name="supportedContextTypeGuids">
            A collection of GUIDs that identify the <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/> values
            that this language service can initialize from.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute.#ctor(System.String,Microsoft.VisualStudio.Workspace.ProviderPriority,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IFileContextActionProviderMetadata</param>
            <param name="priority">The provider priority</param>
            <param name="supportedContextTypeGuids">
            A collection of GUIDs that identify the <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/> values
            that this language service can initialize from.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IFileContextActionProviderMetadata</param>
            <param name="supportedContextTypeGuids">
            A collection of GUIDs that identify the <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/> values
            that this language service can initialize from.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute.SupportedContextTypes">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute.Options">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute.OptionFlagsInternal">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute">
            <summary>
            Exports an <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextProvider"/> to the MEF catalog
            with metadata as described by <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextProviderMetadata"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute.#ctor(System.String,Microsoft.VisualStudio.Workspace.ProviderPriority,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IFileContextProviderMetadata</param>
            <param name="priority">The provider priority</param>
            <param name="supportedContextTypeGuids">
            A collection of the values that may be produced for <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/>
            by this provider.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute.#ctor(System.String,Microsoft.VisualStudio.Workspace.ProviderPriority,System.Type[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IFileContextProviderMetadata</param>
            <param name="priority">The provider priority</param>
            <param name="supportedGetContextsTypes">Supported GetContexts types</param>
            <param name="supportedContextTypeGuids">
            A collection of the values that may be produced for <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/>
            by this provider.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute.#ctor(Microsoft.VisualStudio.Workspace.FileContextProviderOptions,System.String,Microsoft.VisualStudio.Workspace.ProviderPriority,System.Type[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute"/> class.
            </summary>
            <param name="options">FileContextProvider Options</param>
            <param name="type">The unique type for this IFileContextProviderMetadata</param>
            <param name="priority">The provider priority</param>
            <param name="supportedGetContextsTypes">Supported GetContexts types</param>
            <param name="supportedContextTypeGuids">
            A collection of the values that may be produced for <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/>
            by this provider.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IFileContextProviderMetadata</param>
            <param name="supportedContextTypeGuids">
            A collection of the values that may be produced for <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/>
            by this provider.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute.Options">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute.SupportedContextTypes">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute.SupportedGetContextsTypes">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute.OptionFlagsInternal">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ExportFileExtensionsAttributeBase">
            <summary>
            Export File Extension provide base
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportFileExtensionsAttributeBase.#ctor(System.String,System.String,System.String[],Microsoft.VisualStudio.Workspace.ProviderPriority,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileExtensionsAttributeBase"/> class.
            </summary>
            <param name="version">Version for this provider</param>
            <param name="type">The unique type for this Provider</param>
            <param name="supportedFileExtensions">
            The set of file extensions (including the leading period) that this scanner
            is capable of parsing.</param>
            <param name="priority">Provider priority</param>
            <param name="contractType">Contract type</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportFileExtensionsAttributeBase.#ctor(System.String,System.String[],Microsoft.VisualStudio.Workspace.ProviderPriority,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileExtensionsAttributeBase"/> class.
            </summary>
            <param name="type">The unique type for this Provider</param>
            <param name="supportedFileExtensions">
            The set of file extensions (including the leading period) that this scanner
            is capable of parsing.</param>
            <param name="priority">Provider priority</param>
            <param name="contractType">Contract type</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportFileExtensionsAttributeBase.#ctor(System.String,System.String[],System.String[],Microsoft.VisualStudio.Workspace.ProviderPriority,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileExtensionsAttributeBase"/> class.
            </summary>
            <param name="type">The unique type for this Provider</param>
            <param name="contentTypes">list of content types to handle</param>
            <param name="filesFilters">anonymous content type definition</param>
            <param name="priority">Provider priority</param>
            <param name="contractType">Contract type</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportFileExtensionsAttributeBase.FilesFilters">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportFileExtensionsAttributeBase.SupportedContentTypes">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase">
            <summary>
            Base Implementation for the IProviderMetadataBase interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase.#ctor(System.String,System.String,Microsoft.VisualStudio.Workspace.ProviderPriority,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase"/> class.
            </summary>
            <param name="version">Version for this provider</param>
            <param name="type">The unique type for this IProviderMetadataBase</param>
            <param name="priority">The provider priority</param>
            <param name="contractType">Contract Type</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase.#ctor(System.String,Microsoft.VisualStudio.Workspace.ProviderPriority,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase"/> class.
            </summary>
            <param name="type">The unique type for this IProviderMetadataBase</param>
            <param name="priority">The provider priority</param>
            <param name="contractType">Contract Type</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase"/> class.
            </summary>
            <param name="type">The unique type for this IProviderMetadataBase</param>
            <param name="contractType">Contract Type</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase.Version">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase.Type">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase.Priority">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase.OptionFlags">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportProviderAttributeBase.OptionFlagsInternal">
            <summary>
            Return the options flags internal
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ExportWorkspaceServiceFactoryAttribute">
            <summary>
            Class ExportWorkspaceServiceFactoryAttribute
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ExportWorkspaceServiceFactoryAttribute.#ctor(Microsoft.VisualStudio.Workspace.WorkspaceServiceFactoryOptions,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ExportWorkspaceServiceFactoryAttribute"/> class.
            </summary>
            <param name="options">Options for service factory</param>
            <param name="supportedTypes">List of types supported by this factory</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportWorkspaceServiceFactoryAttribute.Options">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExportWorkspaceServiceFactoryAttribute.SupportedTypes">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ExternalItemsRequest">
            <summary>
             Data structure to request external items
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ExternalItemsRequest.ExternalItemsContextType">
            <summary>
            External items context type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ExternalItemsRequest.ExternalItemsContextTypeGuid">
            <summary>
            External items context type Guid
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ExternalItemsRequest.Query">
            <summary>
            The query string to match for external items
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.FileContext">
            <summary>
            Describes the context a file may belong to, such as a compilation unit for a source file,
            a consuming HTML page for a .js file, etc.
            </summary>
            <remarks>
            An instance of this type may be shared across many files, or members of the context.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.FileContext.EmptyFileContexts">
            <summary>
            Empty file contexts
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileContext.#ctor(System.Guid,System.Guid,System.Object,System.Collections.Generic.IReadOnlyCollection{System.String},System.String,Microsoft.VisualStudio.Workspace.INotifyFileContextChanged)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.FileContext"/> class.
            </summary>
            <param name="providerType">
            An identifier for the type of the provider that create this Context
            </param>
            <param name="contextType">
            An identifier for the type of object and data represented in <paramref name="context"/>.
            This may be used to match with a compatible language service provider.
            </param>
            <param name="context">
            The information a language service would need to fully initialize for a member of this context.
            </param>
            <param name="inputFiles">
            The set of workspace-relative paths to files that served as inputs to the construction of this context.
            This is *not* the set of files that would be read during execution of a build.
            </param>
            <param name="displayName">
            The user-friendly name for this context (e.g. "Debug|Any CPU"). May be empty, but must not be null.
            </param>
            <param name="notifyFileContextChanged">
            The INotifyFileContextChanged implementation to use it for notification
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContext.OnFileContextChanged">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContext.NotifyFileContextChanged">
            <summary>
            Return or set the current file context changed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContext.ProviderType">
            <summary>
            The Provider source for this Context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType">
            <summary>
            Gets an identifier for the type of object and data represented in <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.Context"/>.
            This may be used to match with a compatible language service provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContext.Context">
            <summary>
            Gets the information a language service would need
            to fully initialize for a member of this context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContext.InputFiles">
            <summary>
            Gets the set of workspace-relative paths to files that served as inputs to computing this context.
            This is *not* the set of source files that would go into a compilation unit, but rather
            the set of files read to determine *how* to assembly the context.
            </summary>
            <remarks>
            This collection may be used to know when to refresh this context
            (e.g. when the user changes the project file or project.lock.json).
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContext.DisplayName">
            <summary>
            Gets the name for this context (if any) that may be displayed to the user
            to pick among several available contexts.
            </summary>
            <value>
            Typically a full configuration name (e.g. "Debug|Any CPU").
            But may be <see cref="F:System.String.Empty"/>. Never null.
            </value>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileContext.CreateFileContexts(Microsoft.VisualStudio.Workspace.FileContext[])">
            <summary>
            Return a file context collection
            </summary>
            <param name="fileContexts">Array of file contexts</param>
            <returns>Read only collection of File contexts</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileContext.GetContext``1">
            <summary>
            Get the context assuming a type expected
            </summary>
            <typeparam name="T">Type expected</typeparam>
            <returns>The context casted as the type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileContext.IsContextTypeOf``1">
            <summary>
            If the contained Context is of a certain type
            </summary>
            <typeparam name="T">The type we want to check</typeparam>
            <returns>true if the context type is a subclass of the type</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.FileContextActionBase">
            <summary>
            Implement IFileContextActionBase using a function callback
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileContextActionBase.#ctor(System.Func{System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.VisualStudio.Workspace.IFileContextActionResult}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.FileContextActionBase"/> class.
            </summary>
            <param name="callback">Callback function to invoke when executing the action</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileContextActionBase.ExecuteAsync(System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.FileContextActionCallback">
            <summary>
            FileContextActionCallback class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileContextActionCallback.#ctor(Microsoft.VisualStudio.Workspace.FileContext,System.Func{System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.VisualStudio.Workspace.IFileContextActionResult}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.FileContextActionCallback"/> class.
            </summary>
            <param name="source">The source context</param>
            <param name="callback">Callback to invoke</param>
            <param name="displayName">The display name of this action</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContextActionCallback.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContextActionCallback.Source">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.FileContextActionDelegate">
            <summary>
            FileContextActionDelegate class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileContextActionDelegate.#ctor(Microsoft.VisualStudio.Workspace.IFileContextAction,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.FileContextActionDelegate"/> class.
            </summary>
            <param name="fileContextAction">The delegate IFileContextAction</param>
            <param name="displayName">Display name</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContextActionDelegate.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContextActionDelegate.Source">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContextActionDelegate.InnerAction">
            <summary>
            The inner action of this delegate.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileContextActionDelegate.ExecuteAsync(System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.FileContextActionProviderOptions">
            <summary>
            Options for IFileContextProvider
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.FileContextActionProviderOptions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.FileContextActionResult">
            <summary>
            Default implementation for a IFileContextActionResult interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileContextActionResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.FileContextActionResult"/> class.
            </summary>
            <param name="success">If success or not this result instance</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileContextActionResult.IsSuccess">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.FileContextProviderOptions">
            <summary>
            Options for IFileContextProvider
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.FileContextProviderOptions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.FileSystemContextChanged">
            <summary>
            Class FileSystemContextChanged.
            Use the workspace file system watcher notification to propagate a FileContext notification
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileSystemContextChanged.#ctor(Microsoft.VisualStudio.Workspace.IWorkspace,System.Func{System.IO.FileSystemEventArgs,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.FileSystemContextChanged"/> class.
            </summary>
            <param name="workspace">Workspace instance</param>
            <param name="fileSystemEventFilter">The file system event filter to apply</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileSystemContextChanged.#ctor(Microsoft.VisualStudio.Workspace.IWorkspace,System.Collections.Generic.IEnumerable{System.String},System.IO.WatcherChangeTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.FileSystemContextChanged"/> class.
            </summary>
            <param name="workspace">Workspace instance</param>
            <param name="inputFiles">Input files to track</param>
            <param name="watcherChangeTypes">Change types to track</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.FileSystemContextChanged.OnFileContextChanged">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.FileSystemEventArgsHelper">
            <summary>
            Helper utility for FileSystemEventArgs class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.FileSystemEventArgsHelper.IsDirectoryChanged(System.IO.FileSystemEventArgs)">
            <summary>
            Check if related to a directory changed event
            </summary>
            <param name="fileSystemEventArgs">The File System Event</param>
            <returns>true is a directory changed event</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Grouping`2">
            <summary>
            A trivial implementation of <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
            <typeparam name="TKey">The key of the group.</typeparam>
            <typeparam name="TElement">The element type of the group.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Grouping`2.elements">
            <summary>
            The elements in the group.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Grouping`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Grouping`2"/> class.
            </summary>
            <param name="key">The key for this group.</param>
            <param name="elements">The elements in this group.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Grouping`2.Key">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Grouping`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Grouping`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IActionBlockService">
            <summary>
            Service to allow posting actions into the workspace
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IActionBlockService.DisposeToken">
            <summary>
            The service dispose token
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IActionBlockService.SendAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Post an action block into the workspace
            </summary>
            <param name="action">Callback to execute in our service</param>
            <returns>Completion task when the action is posted</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IAsyncServiceProvider">
            <summary>
            Interface to access a service using async pattern
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IAsyncServiceProvider.GetServiceAsync(System.Type)">
            <summary>
            Get the service
            </summary>
            <param name="serviceType">Type of service desired</param>
            <returns>Completion task when the service is available</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IAsyncWorkspaceProviderFactory`1">
            <summary>
            Provider workspace async factory
            </summary>
            <typeparam name="T">Type of provider to create</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IAsyncWorkspaceProviderFactory`1.CreateProviderAsync(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Create an instance of provider using async pattern
            </summary>
            <param name="workspaceContext">The workspace context</param>
            <returns>Created instance of a provider type</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IAsyncWorkspaceServiceFactory">
            <summary>
            Create a workspace service using async pattern
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IAsyncWorkspaceServiceFactory.CreateServiceAsync(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Create an instance of a service in the context of a IWorkspace
            </summary>
            <param name="workspaceContext">The workspace context instance</param>
            <returns>The Service instance</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextAction">
            <summary>
            Describes an action supported by a <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextActionProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileContextAction.Source">
            <summary>
            File Context source of this Action
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileContextAction.DisplayName">
            <summary>
            Gets the name of this action as it should be presented to the user.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextActionBase">
            <summary>
            Describes an action supported by a <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextActionProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IFileContextActionBase.ExecuteAsync(System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)">
            <summary>
            Executes the action.
            </summary>
            <param name="progress">A means to report progress as the action executes.</param>
            <param name="cancellationToken">A token that may cancel the action.</param>
            <returns>A task whose result describes the result of the action.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate">
            <summary>
            Provides an update on the progress of an ongoing <see cref="M:Microsoft.VisualStudio.Workspace.IFileContextActionBase.ExecuteAsync(System.IProgress{Microsoft.VisualStudio.Workspace.IFileContextActionProgressUpdate},System.Threading.CancellationToken)"/> operation.
            </summary>
            <remarks>
            Other interfaces may be implemented by objects that implement this interface in order to provide
            action specific updates.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextActionProvider">
            <summary>
            Offers arbitrary action execution for files.
            </summary>
            <remarks>
            An implementing type should export this interface with
            the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileContextActionProviderAttribute"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IFileContextActionProvider.GetActionsAsync(System.String,Microsoft.VisualStudio.Workspace.FileContext,System.Threading.CancellationToken)">
            <summary>
            Gets the actions appropriate for a given file and context.
            </summary>
            <param name="filePath">
            The file workspace being passed
            </param>
            <param name="fileContext">The context to act with.</param>
            <param name="cancellationToken">A token that may cancel the request.</param>
            <returns>
            A task whose result is a list of actions that may be invoked for a given file and context.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextActionProviderMetadata">
            <summary>
            Describes an <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextActionProvider"/> extension's applicability and capabilities.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileContextActionProviderMetadata.Options">
            <summary>
            FileContextActionProvider Options
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextActionResult">
            <summary>
            Describes the result of some <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextAction"/>.
            </summary>
            <remarks>
            Other interfaces may be implemented by objects that implement this interface
            in order to provide data that is specific to a particular kind of action.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileContextActionResult.IsSuccess">
            <summary>
            Gets a value indicating whether the action was successful.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextConsumerMetadata">
            <summary>
            An interface describing metadata found on exports that consume specific types of file contexts.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileContextConsumerMetadata.SupportedContextTypes">
            <summary>
            Gets a collection of GUIDs that identify the <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/> values
            that this language service can initialize from.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextHierarchy`1">
            <summary>
            Define a file context hierarchy
            </summary>
            <typeparam name="T">Type of file context item</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileContextHierarchy`1.Parent">
            <summary>
            Return parent context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileContextHierarchy`1.Items">
            <summary>
            Return list of child contexts
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextProvider">
            <summary>
            Offers services to discover contexts defined in source files.
            </summary>
            <remarks>
            <para>
            An implementing type should export this interface using
            the <see cref="T:Microsoft.VisualStudio.Workspace.ExportFileContextProviderAttribute"/>.
            </para>
            <para>
            Implementations should register contexts both for source files and outputs
            that may serve as inputs to other contexts.
            For example when a project B references project A, someone interested in initializing
            a language service for B may need to discover the context for A given A's primary output,
            which serves as an input for B.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IFileContextProvider.GetContextsForFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds contexts for a given file.
            </summary>
            <param name="filePath">
            The file workspace being passed
            </param>
            <param name="cancellationToken">A token whose cancellation should terminate the search.</param>
            <returns>
            A task whose result is collection of contexts that the file belongs to.
            The collection should never be null, but it may be empty.
            </returns>
            <remarks>
            A file may belong to contexts that are not discoverable on-demand with this method.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextProvider`1">
            <summary>
            IFileContextProvider with context type
            </summary>
            <typeparam name="T">The type of the workspace context</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IFileContextProvider`1.GetContextsForFileAsync(System.String,`0,System.Threading.CancellationToken)">
            <summary>
            Get the context
            </summary>
            <param name="filePath">The file path for the context</param>
            <param name="context">Context for the file</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Collection of File Contexts</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileContextProviderMetadata">
            <summary>
            Describes an <see cref="T:Microsoft.VisualStudio.Workspace.IFileContextProvider"/> extension's applicability and capabilities.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileContextProviderMetadata.Options">
            <summary>
            FileContextProvider Options
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileContextProviderMetadata.SupportedContextTypes">
            <summary>
            Gets a collection of the values that may be produced for <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/>
            by this provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileContextProviderMetadata.SupportedGetContextsTypes">
            <summary>
            Collection of types supported when custom workspace contexts are passed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileSelectorMetadata">
            <summary>
            Describes an <see cref="T:Microsoft.VisualStudio.Workspace.IFileSelectorMetadata"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileSelectorMetadata.SupportedContentTypes">
            <summary>
            Optional.
            List of content types this component wants to handle.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileSelectorMetadata.FilesFilters">
            <summary>
            Optional.
            Gets a set of rules (glob patterns) for files. This will constitute "anonymous" content type, aka set of files only available for the given provider.
            Files that matches this rules (if present) will be passed to the component regardless of their calculated content type.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFilesService">
            <summary>
            Interface IFilesService to allow a provider to customize the behavior when a folder is being opened
            and the hierarchy of files an directories has to be retrieved
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IFilesService.GetFilesAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get files from a sub path
            </summary>
            <param name="path">The relative sub path to look for files</param>
            <param name="recursive">If recursive is needed</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Collection of rooted file paths</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IFilesService.GetDirectoriesAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get directories from a sub path
            </summary>
            <param name="path">The relative sub path to look for directories</param>
            <param name="recursive">If recursive is needed</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Collection of rooted directory paths</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFileWatcherService">
            <summary>
            Interface IFileWatcherService
            Sink events to receive file system notification changes using an async pattern
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileWatcherService.OnFileSystemChanged">
            <summary>
            Event File system notification
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IFileWatcherService.OnBatchFileSystemChanged">
            <summary>
            Batch Event File system notification
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFindFilesService">
            <summary>
            Workspace service to find files
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IFindFilesService.FindFilesAsync(System.String,System.IProgress{System.String},System.Threading.CancellationToken)">
            <summary>
            Searches the workspace for files matching a pattern.
            </summary>
            <param name="query">The query to match filenames on. It may be matched based on substring, or a richer parsing of the files.</param>
            <param name="progress">Receives the full path to each file as it is discovered.</param>
            <param name="cancellationToken">A token whose cancellation will cancel the query.</param>
            <returns>A task that completes when all match files have been reported.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IFindFilesService.GetAllFilesAsync">
            <summary>
            Return all the file entities available in a workspace
            </summary>
            <returns>Task completion with enumerable of relative paths</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IFindFilesService2">
            <summary>
            Interface to extend existing IFindFilesService
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IFindFilesService2.GetExternalFilesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get all external files of a folder
            </summary>
            <param name = "path">The path to the folder or file for whom we want the external items</param>
            <param name="query"> The string to use to match an external file name</param>
            <param name="cancellationToken">A token whose cancellation will cancel the query.</param>
            <returns>A collection of the files external to a given path</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IFindFilesService2.FindAllFilesAsync(System.String,System.IProgress{System.String},System.Threading.CancellationToken)">
            <summary>
            Searches the workspace and asks all providers during runtime for files matching a pattern.
            </summary>
            <param name="query">The query to match filenames on. It may be matched based on substring, or a richer parsing of the files.</param>
            <param name="progress">Receives the full path to each file as it is discovered.</param>
            <param name="cancellationToken">A token whose cancellation will cancel the query.</param>
            <returns>A task that completes when all match files have been reported.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IHostService">
            <summary>
            Host-specific information use for workspace construction and operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IHostService.LocalAppDataLocation">
            <summary>
            Gets the path to the root directory for the host application local data.
            </summary>
            <value>An absolute path.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IHostService2">
            <summary>
            Additional host-specific information provided by an implementer of <see cref="T:Microsoft.VisualStudio.Workspace.IHostService"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IHostService2.CacheLocationForWorkspace">
            <summary>
            Gets the location a workspace should store any cache files. The location must
            have read-write access.
            </summary>
            <returns>A full path</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute">
            <summary>
            Exports an <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IFileScanner"/> to the MEF catalog
            with metadata as described by <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IFileScannerMetadata"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute.#ctor(Microsoft.VisualStudio.Workspace.Indexing.FileScannerOptions,System.String,System.String,System.String,System.String[],System.Type[],Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute"/> class.
            </summary>
            <param name="options">FileScanner options</param>
            <param name="version">Version for this provider</param>
            <param name="type">The unique type for this IFileScannerMetadata</param>
            <param name="language">A simple name that describes the kind of files this scanner is suitable for.</param>
            <param name="supportedFileExtensions">
            The set of file names or extensions (including the leading period) that this scanner
            is capable of parsing.</param>
            <param name="supportedTypes">List of types supported by this file scanner</param>
            <param name="priority">File scanner priority</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute.#ctor(Microsoft.VisualStudio.Workspace.Indexing.FileScannerOptions,System.String,System.String,System.String[],System.Type[],Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute"/> class.
            </summary>
            <param name="options">FileScanner options</param>
            <param name="type">The unique type for this IFileScannerMetadata</param>
            <param name="language">A simple name that describes the kind of files this scanner is suitable for.</param>
            <param name="supportedFileExtensions">
            The set of file names or extensions (including the leading period) that this scanner
            is capable of parsing.</param>
            <param name="supportedTypes">List of types supported by this file scanner</param>
            <param name="priority">File scanner priority</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute.#ctor(System.String,System.String,System.String[],System.Type[],Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IFileScannerMetadata</param>
            <param name="language">A simple name that describes the kind of files this scanner is suitable for.</param>
            <param name="supportedFileExtensions">
            The set of file names or extensions (including the leading period) that this scanner
            is capable of parsing.</param>
            <param name="supportedTypes">List of types supported by this file scanner</param>
            <param name="priority">File scanner priority</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute.#ctor(System.String,System.String,System.String[],System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IFileScannerMetadata</param>
            <param name="language">A simple name that describes the kind of files this scanner is suitable for.</param>
            <param name="supportedFileExtensions">
            The set of file names or extensions (including the leading period) that this scanner
            is capable of parsing.</param>
            <param name="supportedTypes">List of types supported by this file scanner</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute.#ctor(System.String,System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute"/> class.
            </summary>
            <param name="type">The unique type for this IFileScannerMetadata</param>
            <param name="language">A simple name that describes the kind of files this scanner is suitable for.</param>
            <param name="fileExtension">The file name or extension (including the leading period) that this scanner is capable of parsing.</param>
            <param name="supportedType">The supported type to be scanned</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute.Options">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute.Language">
            <summary>
            Gets a simple name that describes the kind of files this scanner is suitable for.
            </summary>
            <value>A short string, such as "C++" or "C#".</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute.SupportedTypes">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute.OptionFlagsInternal">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileDataResult`1">
            <summary>
            Class FileDataResult
            Provide data from a previously indexed data of a file scanner provider
            </summary>
            <typeparam name="T">Type of the data being retrieved</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileDataResult`1.#ctor(System.String,`0,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileDataResult`1"/> class.
            </summary>
            <param name="name">Name of the result</param>
            <param name="value">Value of result</param>
            <param name="target">Optional target</param>
            <param name="context">Optional context</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileDataResult`1.Name">
            <summary>
            Name of the Value
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileDataResult`1.Value">
            <summary>
            Value data
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileDataResult`1.Target">
            <summary>
            Optional Target
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileDataResult`1.Context">
            <summary>
            Optional Context
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileDataValue">
            <summary>
            FileDataValue class to return from IFileScanner interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileDataValue.#ctor(System.Guid,System.String,System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileDataValue"/> class.
            </summary>
            <param name="type">The type of this data value</param>
            <param name="name">Name of the entry</param>
            <param name="value">Value entry(can be null)</param>
            <param name="target">The target of this value (or null)</param>
            <param name="context">The context of this value (or null)</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileDataValue.Type">
            <summary>
            Type of this scanned entry
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileDataValue.Name">
            <summary>
            Name of the scanned entry
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileDataValue.Value">
            <summary>
            Value of the scanned entry
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileDataValue.Target">
            <summary>
            The Target of this Value (or null if there is none)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileDataValue.Context">
            <summary>
            The Context of this Value (or null if there is none)
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileEntityChanged">
            <summary>
            File Entity changed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileEntityChanged.Changed">
            <summary>
            Entity content has changed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileEntityChanged.Deleted">
            <summary>
            Entity was deleted
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileEntityChanged.Created">
            <summary>
            Entity is created
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileEntityChanged.Renamed">
            <summary>
            Entity was renamed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileEntityChanged.Refresh">
            <summary>
            A folder and all its child entities were refreshed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileEntityChangedEventArgs">
            <summary>
            FileEntityChanged EventArgs
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileEntityChangedEventArgs.#ctor(System.String,Microsoft.VisualStudio.Workspace.Indexing.FileEntityChanged,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileEntityChangedEventArgs"/> class.
            </summary>
            <param name="path">The entity path</param>
            <param name="changeType">Change type</param>
            <param name="isFile">If entity is a file</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileEntityChangedEventArgs.Path">
            <summary>
            Entity Path
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileEntityChangedEventArgs.IsFile">
            <summary>
            If the entity is a file
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileEntityChangedEventArgs.ChangeType">
            <summary>
            Changed type
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfo">
            <summary>
            Describes the definition of a file reference
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfo.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfo"/> class.
            </summary>
            <param name="relativePath">The file relative path</param>
            <param name="target">The target of this reference (or null)</param>
            <param name="context">The context of this reference (or null)</param>
            <param name="referenceType">Type of this reference (or null)</param>
            <param name="useReferenceEntityId">If file system entity can be used</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfo.WorkspacePath">
            <summary>
            The workspace relative reference file path
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfo.Target">
            <summary>
            The Target of this Reference (or null if there is none)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfo.Context">
            <summary>
            The Context of this Reference (or null if there is none)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfo.UseReferenceEntityId">
            <summary>
            If File system entity can be used to track the workspace reference
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfo.ReferenceType">
            <summary>
            The reference type
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfo.Equals(Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfo)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfoType">
            <summary>
            Default enumeration types for FileScannerInfo
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfoType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfoType.Source">
            <summary>
            A source file
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfoType.Output">
            <summary>
            An output file
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfoType.ProjectReference">
            <summary>
            A Project Reference file
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfoType.Dependency">
            <summary>
            A tracked dependency
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfoType.ProjectDependency">
            <summary>
            A Project Dependency file
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfoType.ExternalItem">
            <summary>
            An external item
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceResult">
            <summary>
            Class FileReferenceResult
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceResult.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceResult"/> class.
            </summary>
            <param name="path">Workspace relative path</param>
            <param name="target">Target of reference</param>
            <param name="context">Context of reference</param>
            <param name="type">Type of reference</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceResult.Path">
            <summary>
            Path to reference file
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceResult.Target">
            <summary>
            Target of reference
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceResult.Context">
            <summary>
            Context of reference
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceResult.Type">
            <summary>
            Type of Reference (Input, Output, etc..)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceResult.Equals(Microsoft.VisualStudio.Workspace.Indexing.FileReferenceResult)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceResult.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileReferenceResult.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEntityCache">
            <summary>
            Provide information on the file scanner cache of an entity
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEntityCache.#ctor(Microsoft.VisualStudio.Workspace.Indexing.FileScannerType,System.DateTimeOffset,System.Guid,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEntityCache"/> class.
            </summary>
            <param name="type">The type of the file scanner</param>
            <param name="timestamp">When this was tracked</param>
            <param name="providerType">The provider ID that create the scan data</param>
            <param name="providerVersion">The provider version who create the data</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEntityCache.FileScannerType">
            <summary>
            Retrieve scanner type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEntityCache.Timestamp">
            <summary>
            Retrieve Timestamp of the cache
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEntityCache.ProviderType">
            <summary>
            The Provider type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEntityCache.ProviderVersion">
            <summary>
            The Provider version
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEventArgs">
            <summary>
            EventArg for File scanning phase
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEventArgs.#ctor(System.String,System.Collections.Generic.IReadOnlyDictionary{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEventArgs"/> class.
            </summary>
            <param name="filePath">Relative workspace file/directory path</param>
            <param name="content">Scanning content</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEventArgs.WorkspaceFilePath">
            <summary>
            Relative workspace file path. An empty value mean is the root folder itself
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEventArgs.Content">
            <summary>
            The file scanned content
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileScannerEventArgs.TryGetContent``1(``0@)">
            <summary>
            Query a content value
            </summary>
            <typeparam name="T">Type of expected content</typeparam>
            <param name="value">Result of the data value or null if not found</param>
            <returns>True if type content is found</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerOptions">
            <summary>
            Options for IFileContextProvider
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerOptions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerOptions.UpToDateEvaluateDependencies">
            <summary>
            If evaluate dependencies is desired for up to date check
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerType">
            <summary>
            Class FileScannerTypes
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerType.Unknown">
            <summary>
            Unknown scanner type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerType.FileReference">
            <summary>
            File Reference scanner type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerType.FileData">
            <summary>
            File Data scanner type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerType.Symbol">
            <summary>
            Symbol scanner type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerType.Content">
            <summary>
            Content type
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypeConstants">
            <summary>
            Class FileScannerTypes
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypeConstants.FileReferenceInfoType">
            <summary>
            File Index Info Type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypeConstants.FileDataValuesType">
            <summary>
            File Data Values Info Type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypeConstants.SymbolsDefinitionsType">
            <summary>
            Symbols definition type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypeConstants.FileScannerContentType">
            <summary>
            Scanner content definition type
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypeEventArgs">
            <summary>
            Represents the data for events using a particular <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerType"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypeEventArgs.#ctor(Microsoft.VisualStudio.Workspace.Indexing.FileScannerType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypeEventArgs"/> class.
            </summary>
            <param name="scannerType">The type of file scanner related to an event</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.FileScannerTypeEventArgs.ScannerType">
            <summary>
            Gets the type of file scanner related to an event.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.FileScanningException">
            <summary>
            Represent a failure caused when a file scanner job throws an error
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileScanningException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileScanningException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileScanningException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileScanningException"/> class.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception being propagated</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileScanningException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileScanningException"/> class.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.FileScanningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileScanningException"/> class.
            </summary>
            <param name="serializationInfo">Serialization Info</param>
            <param name="streamingContext">Streaming context</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IDeferredQuery`1">
            <summary>
            IDeferredQuery interface
            </summary>
            <typeparam name="T">Type of the item</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IFileScanner">
            <summary>
            Offers services to discover symbols defined in source files.
            </summary>
            <remarks>
            An implementing type should export this interface with
            the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.ExportFileScannerAttribute"/>.
            Each instance of this interface should be prepared to deal with just one
            file type. If a single scanner advertises multiple
            <see cref="T:Microsoft.VisualStudio.Workspace.IFileSelectorMetadata"/>, it should be
            prepared to identify which file type it is (if necessary) based solely on
            the content of the file and not the file name.
            If the file extension is an important distinguishing factor, use multiple
            instances of this interface, each advertising support for the various file
            extensions.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IFileScanner.ScanContentAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Scan a source file for symbol definitions.
            </summary>
            <typeparam name="T">the expected type to be scanned</typeparam>
            <param name="filePath">The workspace file to scan</param>
            <param name="cancellationToken">A token that can cancel the scan.</param>
            <returns>A task whose result is the collection of discovered symbols.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IFileScannerMetadata">
            <summary>
            Describes an <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IFileScanner"/> extension's applicability and capabilities.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IFileScannerMetadata.Options">
            <summary>
            FileScanner options
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IFileScannerMetadata.Language">
            <summary>
            Gets a simple name that describes the kind of files this scanner is suitable for.
            </summary>
            <value>A short string, such as "C++" or "C#".</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IFileScannerProvider">
            <summary>
            An interface that may be exported to provide a collection of symbol scanners at runtime.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IFileScannerProvider.GetSymbolScannersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a collection of symbol scanners.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A collection of symbol scanners with metadata.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IFileScannerUpToDateCheck">
            <summary>
            Provides a method that helps to determine if a file is up to date.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IFileScannerUpToDateCheck.IsUpToDateAsync(System.Nullable{System.DateTimeOffset},System.String,Microsoft.VisualStudio.Workspace.Indexing.FileScannerType,System.Threading.CancellationToken)">
            <summary>
            Check if a file is up to date before scanning it.
            </summary>
            <param name="lastScanTimestamp">Indexed timestamp</param>
            <param name="filePath">The file path</param>
            <param name="scannerType">The scanner type</param>
            <param name="cancellationToken">A token that can cancel the check.</param>
            <returns>True is the file is up to date</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceData">
            <summary>
            Interface to access the indexing data trough a snapshot
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceData.GetReferencedFilesAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Return cached File Reference info
            </summary>
            <param name="filePath">File entity path</param>
            <param name="target">Target for the reference (or null)</param>
            <param name="context">Context for the reference (or null)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Completion task with results</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceData.GetDependentFilesAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Return cached File Dependents info
            </summary>
            <param name="filePath">File entity path</param>
            <param name="target">Target for the reference (or null)</param>
            <param name="context">Context for the reference (or null)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Completion task with results</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceData.GetFileDataValuesAsync``1(System.String,System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Return cached File Data value info
            </summary>
            <typeparam name="T">Type of data expected</typeparam>
            <param name="filePath">File entity path</param>
            <param name="type">The type storage being used</param>
            <param name="target">Target for the reference (or null)</param>
            <param name="context">Context for the reference (or null)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Completion task with results</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceDataService">
            <summary>
            Provider a cache layer on top of the index workspace service
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceDataService.CreateIndexWorkspaceData">
            <summary>
            Create an index workspace data to start working
            </summary>
            <returns>And instance of a IIndexWorkspaceData</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService">
            <summary>
            IIndexWorkspaceService interface definition
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.State">
            <summary>
            Index Workspace state
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.OnPropertyChanged">
            <summary>
            To receive notifications when properties are changed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.OnFileEntityChanged">
            <summary>
            File Entity changed notification
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.OnFileScannerCompleted">
            <summary>
            File Scanner notification
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.OnFileScannerCacheInvalidate">
            <summary>
            File Scanner cache invalidation
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.EntityExists(System.String)">
            <summary>
            Verify if a path is being part of this indexing
            </summary>
            <param name="filePath">The file entity exist</param>
            <returns>True if the indexing has this entity </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.RefreshElementsAsync(Microsoft.VisualStudio.Workspace.Indexing.IndexElement,System.Boolean,System.IProgress{Microsoft.VisualStudio.Workspace.Indexing.IndexProgress},System.Threading.CancellationToken,Microsoft.VisualStudio.Workspace.PauseToken)">
            <summary>
            Refreshes the contents of any caches or subscriptions with the actual contents from disk.
            </summary>
            <param name="elements">Type of elements being refreshed</param>
            <param name="continuous">
            Use <c>true</c> to continuously watch the file system and provide updates
            until <paramref name="cancellationToken"/> is canceled.
            Use <c>false</c> to refresh just once.
            </param>
            <param name="progressCallback">
            A progress reference callback
            </param>
            <param name="cancellationToken">
            A token to cancel the refresh operation.
            Must not be <see cref="P:System.Threading.CancellationToken.None"/> if <paramref name="continuous"/> is <c>true</c>.
            </param>
            <param name="pauseToken">Optional pause token</param>
            <returns>A task representing the long-running operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.RefreshElementsAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.Workspace.Indexing.IndexElement,System.Threading.CancellationToken)">
            <summary>
            Refresh an element
            </summary>
            <param name="filePaths">Enumerable of entities to refresh</param>
            <param name="elements">Type of elements being refreshed</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task representing the long-running operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.GetFileScannerState(System.String,Microsoft.VisualStudio.Workspace.Indexing.FileScannerType)">
            <summary>
            Get the File scanner state type
            </summary>
            <param name="filePath">Reference to element path</param>
            <param name="type">Type of file scanner</param>
            <returns>DateTimeOffset when the file scanner data or null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.GetDependentFilesAsync(System.String,System.String,System.String,System.Int32[])">
            <summary>
            Return dependent files on a file contained in our workspace
            </summary>
            <param name="filePath">File entity path</param>
            <param name="target">Target for the reference (or null)</param>
            <param name="context">Context for the reference (or null)</param>
            <param name="referenceTypes">reference types</param>
            <returns>list of dependent files</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.GetFileReferencesAsync(System.String,System.Boolean,System.Threading.CancellationToken,System.String,System.String,System.Int32[])">
            <summary>
            Return file references to a file contained in our workspace
            </summary>
            <param name="filePath">File entity path</param>
            <param name="refreshOption">Refresh option</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="target">Target for the reference (or null)</param>
            <param name="context">Context for the reference (or null)</param>
            <param name="referenceTypes">reference types</param>
            <returns>list of references</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.GetFileDataValuesAsync``1(System.String,System.Guid,System.Boolean,System.Threading.CancellationToken,System.String,System.String)">
            <summary>
            Return a enumerable of data from a File system entity
            </summary>
            <typeparam name="T">Type of Value being expected</typeparam>
            <param name="filePath">File entity path</param>
            <param name="type">The type of data being retrieved</param>
            <param name="refreshOption">Refresh option</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="target">Target for the reference (or null)</param>
            <param name="context">Context for the reference (or null)</param>
            <returns>Collection of data</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.GetFilesDataValuesAsync``1(System.Guid,System.Threading.CancellationToken,System.String,System.String)">
            <summary>
            Return a dictionary of data for multiple files
            </summary>
            <typeparam name="T">Type of Value being expected</typeparam>
            <param name="type">The type of data being retrieved</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="target">Target for the reference (or null)</param>
            <param name="context">Context for the reference (or null)</param>
            <returns>Dictionary with file and data</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.GetSettingsValue``1(System.String)">
            <summary>
            Get setting value
            </summary>
            <typeparam name="T">Type of setting being expected</typeparam>
            <param name="settingName">The setting name</param>
            <returns>Completion task with the value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.SetSettingsValue(System.String,System.Object)">
            <summary>
            Set a setting value
            </summary>
            <param name="settingName">The setting name</param>
            <param name="settingValue">Value to be set</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.InvalidateFileScannerCache">
            <summary>
            Invalidate all the file scanner cache
            </summary>
            <returns>Completion task with number of rows affected</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.PurgeFileScannerDataForProvider(System.Guid)">
            <summary>
            Purge all data produced by a provider
            </summary>
            <param name="providerType">The provider types</param>
            <returns>Completion Task</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.PurgeFileScannerData(System.String,System.Guid)">
            <summary>
            Purge data for file entity
            </summary>
            <param name="filePath">The indexed file path</param>
            <param name="providerType">Optional provider type</param>
            <returns>Task completion</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.GetAllFiles">
            <summary>
            Get All files that are indexed
            </summary>
            <returns>A deferred query</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService.GetFilesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Files from our entities with a pattern matching
            </summary>
            <param name="pattern">Pattern to look for</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of files that match the criteria</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService2">
            <summary>
            Extension interface for for <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService2.FindFileReferencesAsync(System.String,System.Threading.CancellationToken,System.String,System.String,System.Int32[])">
            <summary>
            Find files in our File References using pattern match
            </summary>
            <param name="referenceFilePathPattern">The pattern to use to match a file reference path</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="target">Optional target filter</param>
            <param name="context">Optional Context filter</param>
            <param name="referenceTypes">Optional Reference types</param>
            <returns>Completion task with a Dictionary results</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService2.PushEntityDataAsync(System.String,System.Guid,Microsoft.VisualStudio.Workspace.Indexing.IndexEntityData,System.Threading.CancellationToken)">
            <summary>
            Push data into our indexing service
            </summary>
            <param name="filePath">File path of entity we want to push</param>
            <param name="providerType">The provider unique id responsable of this data</param>
            <param name="indexEntityData">Data to push</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService2.GetFileScannerCacheAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Return File scanner cache for an file entity
            </summary>
            <param name="filePath">The file path</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Completion task with result</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService2.GetFileScannerCacheAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Return multiple file scanner cache
            </summary>
            <param name="filePaths">Enumerable of file paths</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Completion task with Dictionary of data</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService2.GetFileReferencesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Return FileReferences for a set of file entities
            </summary>
            <param name="filePaths">Enumerable of file paths</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Return Completion task with Dictionary of data</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService2.IsProviderUpToDateAsync(System.String,Microsoft.VisualStudio.Workspace.Indexing.FileScannerEntityCache,System.Threading.CancellationToken)">
            <summary>
            Check if entity has a file scanner type up to date
            </summary>
            <param name="filePath">The file path></param>
            <param name="fileScannerEntityCache">Info about the file scanner</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Completion task</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService3">
            <summary>
            Extension interface for <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService2"/>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService3.OnFileScannerTypeCompleted">
            <summary>
            This event will be fired when scanning of certain file scanner type is considered
            complete including the case there's no supported scanner of that type.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceServiceHelper">
            <summary>
            Helper class for interface IIndexWorkspaceService
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceServiceHelper.GetValuesByNameAsync``1(Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService,System.String,System.Guid,System.Boolean,System.Threading.CancellationToken,System.String,System.String)">
            <summary>
            Retrieve data value as Dictionary data
            </summary>
            <typeparam name="T">Type of value to expect</typeparam>
            <param name="indexWorkspaceService">The index service</param>
            <param name="filePath">File path</param>
            <param name="type">Guid type of value</param>
            <param name="refreshOption">Refresh option</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="target">Optional target</param>
            <param name="context">Optional context</param>
            <returns>Dictionary with name/value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceServiceHelper.GetValuesByContextAsync``1(Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService,System.String,System.Guid,System.Boolean,System.Threading.CancellationToken,System.String)">
            <summary>
            Retrieve data values as Dictionary using the context as the key
            </summary>
            <typeparam name="T">Type of value to expect</typeparam>
            <param name="indexWorkspaceService">The index service</param>
            <param name="filePath">File path</param>
            <param name="type">Guid type of value</param>
            <param name="refreshOption">Refresh option</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="target">Optional target</param>
            <returns>Dictionary with name/value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceServiceHelper.RefreshElementAsync(Microsoft.VisualStudio.Workspace.Indexing.IIndexWorkspaceService,System.String,Microsoft.VisualStudio.Workspace.Indexing.IndexElement,System.Threading.CancellationToken)">
            <summary>
            Refresh an element
            </summary>
            <param name="indexWorkspaceService">The index service</param>
            <param name="filePath">Reference to element path</param>
            <param name="elements">Type of elements being refreshed</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task representing the long-running operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IndexElement">
            <summary>
            Refresh options for indexing
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.None">
            <summary>
            No index element.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.FileListing">
            <summary>
            The cache of the file listings in the workspace.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.FileReferenceScanning">
            <summary>
            File reference scanning
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.FileDataValueScanning">
            <summary>
            File data values scanning
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.SymbolScanning">
            <summary>
            Symbol scanning
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.FileContentScanning">
            <summary>
            File content scanning
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.EvaluateDependencies">
            <summary>
            If evaluate dependencies is need
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.InvalidateCache">
            <summary>
            If invalidate cache for the elements
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.FileScanning">
            <summary>
            The cache of all symbol definitions in the workspace.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexElement.All">
            <summary>
            All elements of the cache.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IndexEntityData">
            <summary>
            Data available for indexed entity
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IndexEntityData.#ctor(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition},System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.Indexing.FileDataValue},System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.Indexing.FileReferenceInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IndexEntityData"/> class.
            </summary>
            <param name="symbols">Symbols indexed</param>
            <param name="dataValues">Data values indexed</param>
            <param name="fileReferences">File references indexed</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexEntityData.Symbols">
            <summary>
            Symbols indexed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexEntityData.DataValues">
            <summary>
            Data values indexed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexEntityData.FileReferences">
            <summary>
            File references being indexed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IndexProgress">
            <summary>
            IndexProgress class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IndexProgress.#ctor(Microsoft.VisualStudio.Workspace.Indexing.IndexProgressState,System.Double,System.Tuple{System.Int32,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IndexProgress"/> class.
            </summary>
            <param name="state">The progress state</param>
            <param name="completed">Percent completed</param>
            <param name="currentElements">Current elements progress</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexProgress.CurrentElements">
            <summary>
            Current elements
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexProgress.State">
            <summary>
            Current state of the indexing progress
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexProgress.Completed">
            <summary>
            Gets the symbol name and location.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IndexProgressState">
            <summary>
            Index progress state
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexProgressState.Initialize">
            <summary>
            Initialize state
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexProgressState.FileIndexing">
            <summary>
            File indexing
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexProgressState.FileScanning">
            <summary>
            File scanning
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexProgressState.Completed">
            <summary>
            Completed state
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo">
            <summary>
            Represents the result of the index process
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Int32,Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo,System.Collections.Generic.IReadOnlyDictionary{Microsoft.VisualStudio.Workspace.Indexing.FileScannerType,Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo"/> class.
            </summary>
            <param name="totalTime">The total duration of the index process.</param>
            <param name="databaseSyncDuration">The duration of the work on the database.</param>
            <param name="fileContentScanStart">The file content scan start time since index starts</param>
            <param name="fileContentScanEnd">The file content scan end time since index starts</param>
            <param name="fileReferenceScanStart">The file reference scan start time since index starts</param>
            <param name="fileReferenceScanEnd">The file reference scan end time since index starts</param>
            <param name="fileDataScanStart">The file data scan start time since index starts</param>
            <param name="fileDataScanEnd">The file data scan end time since index starts</param>
            <param name="symbolScanStart">The symbol scan start time since index starts</param>
            <param name="symbolScanEnd">The symbol scan end time since index starts</param>
            <param name="indexProcessCount">The number of time that an overall indexing process has been started.</param>
            <param name="fileIndexStep">The <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo"/> corresponding to the file index step.</param>
            <param name="fileScanningSteps">The dictionary of <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo"/> that represents the information about the steps of the indexer.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo.TotalElapsed">
            <summary>
            Gets the total duration of the indexing process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo.DatabaseElapsed">
            <summary>
            Gets the duration of the work on the database.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo.FileContentScanStart">
            <summary>
            Gets the file content scanning start time since index starts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo.FileContentScanEnd">
            <summary>
            Gets the file content scanning end time since index starts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo.FileReferenceScanStart">
            <summary>
            Gets the file reference scan start time since index starts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo.FileReferenceScanEnd">
            <summary>
            Gets the file reference scan end time since index starts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo.FileDataScanStart">
            <summary>
            Gets the file data scan start time since index starts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo.FileDataScanEnd">
            <summary>
            Gets the file data scan end time since index starts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo.SymbolScanStart">
            <summary>
            Gets the symbol scan start time since index starts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo.SymbolScanEnd">
            <summary>
            Gets the symbol scan end time since index starts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo.IndexProcessCount">
            <summary>
            Gets the number of time that an overall indexing process has been started.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo.FileIndexStep">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo"/> corresponding to the file index step.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexResultInfo.FileScanningSteps">
            <summary>
            Gets a dictionary of <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo"/> that represents the information about the steps of the indexer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo">
            <summary>
            Represents the information about a step in the indexer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo.#ctor(System.TimeSpan,System.Int64,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo"/> class.
            </summary>
            <param name="duration">The duration of the step.</param>
            <param name="entryCount">The total number of entities produced by an indexing step.</param>
            <param name="filesToScan">The number of files to scan.</param>
            <param name="filesScanned">The number of files that has been scanned.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo.#ctor(System.TimeSpan,System.Int64,System.Int32,System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.String,Microsoft.VisualStudio.Workspace.Indexing.IndexSymbolScannerDetails},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.VisualStudio.Workspace.Indexing.IndexSymbolScanFileExtensionDetail}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo"/> class.
            </summary>
            <param name="duration">The duration of the step.</param>
            <param name="entryCount">The total number of entities produced by an indexing step.</param>
            <param name="filesToScan">The number of files to scan.</param>
            <param name="filesScanned">The number of files that has been scanned.</param>
            <param name="scannerDetails">The list of scanner details.</param>
            <param name="extensionDetails">The list of extension details</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo.Duration">
            <summary>
            Gets the duration of the step.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo.EntryCount">
            <summary>
            Gets the total number of entities produced by an indexing step.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo.FilesScanned">
            <summary>
            Gets the number of files that has been scanned.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo.FilesToScan">
            <summary>
            Gets the number of files to scan.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo.ScannerDetails">
            <summary>
            Gets the list of scanner details
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexStepInfo.ExtensionDetails">
            <summary>
            Gets the list of extension details
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IndexSymbolScanFileExtensionDetail">
            <summary>
            Represents detail about a file extension that symbol scanners work on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IndexSymbolScanFileExtensionDetail.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IndexSymbolScanFileExtensionDetail"/> class.
            </summary>
            <param name="symbolCount">The number of symbols that symbol scanners found for this extension.</param>
            <param name="duration">The total duration of symbol scanners have spent on this extension.</param>
            <param name="filesCount">The number of files with this extension that has been scanned.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexSymbolScanFileExtensionDetail.SymbolCount">
            <summary>
            Gets number of symbols that symbol scanners found for this extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexSymbolScanFileExtensionDetail.Duration">
            <summary>
            Gets the total duration in milliseconds that symbol scanners have spent on this extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexSymbolScanFileExtensionDetail.FilesCount">
            <summary>
            Gets number of files with this extension that has been scanned.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IndexSymbolScannerDetails">
            <summary>
            Represents details about a symbol scanner.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.IndexSymbolScannerDetails.#ctor(System.TimeSpan,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IndexSymbolScannerDetails"/> class.
            </summary>
            <param name="duration">The total duration of the scanner for all the scanned files. It excludes persisting scanner data.</param>
            <param name="filesCount">The number of files that has been scanned for this scanner.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexSymbolScannerDetails.Duration">
            <summary>
            Gets the total duration of the scanner for all the scanned files. It excludes persisting scanner data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.IndexSymbolScannerDetails.FilesCount">
            <summary>
            Gets the number of files that has been scanned for this scanner.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceProperties">
            <summary>
            IndexWorkspace properties
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceProperties.State">
            <summary>
            State property
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceState">
            <summary>
            Our Index Workspace state
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceState.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceState.FileSystem">
            <summary>
            FileSystem is in progress
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceState.FileScanning">
            <summary>
            File scanning phase
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceState.Completed">
            <summary>
            Indexing is completed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceState.Cancelled">
            <summary>
            The indexing was canceled before completion
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.IndexWorkspaceState.Failed">
            <summary>
            The indexing finished with a failure
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.ISqlConnection">
            <summary>
            An interface to access the data content in the storage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ISqlConnection.GetPathFromEntity(System.Int32)">
            <summary>
            Get Entity from path
            </summary>
            <param name="entityId">Entity id</param>
            <returns>Relative path parts</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ISqlConnection.GetEntityFromPath(System.String)">
            <summary>
            Get the entity id in our database
            </summary>
            <param name="relativePath">The relative path to lookup</param>
            <returns>The entity id or -1 if not found in our storage</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ISqlConnection.Execute(System.String,System.Object[])">
            <summary>
            Execute a SQL statement
            </summary>
            <param name="query">The SQL statement to execute</param>
            <param name="args">List of substitution parameters</param>
            <returns>Number of rows affected by this statement</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ISqlConnection.Query``1(System.String,System.Object[])">
            <summary>
            Query a Data structure statement from our storage
            </summary>
            <typeparam name="T">Type for mapping our expected result</typeparam>
            <param name="query">The Data structure statement</param>
            <param name="args">List of substitution parameters</param>
            <returns>List with results</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ISqlConnection.DeferredQuery``1(System.String,System.Object[])">
            <summary>
            Query a SQL statement from our storage. Iterate on the IEnumerable will start feeding data
            </summary>
            <typeparam name="T">Type for mapping our expected result</typeparam>
            <param name="query">The SQL statement</param>
            <param name="args">List of substitution parameters</param>
            <returns>IEnumerable with results</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.ISqlConnectionService">
            <summary>
            A SQL connection service to be used on the indexing data
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ISqlConnectionService.QueryAsync``1(System.Func{Microsoft.VisualStudio.Workspace.Indexing.ISqlConnection,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Query our database
            </summary>
            <typeparam name="T">Type of data being returned for each row</typeparam>
            <param name="queryCallback">The query callback</param>
            <returns>Completion task with results</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ISqlConnectionService.DeferredQuery``1(System.Func{Microsoft.VisualStudio.Workspace.Indexing.ISqlConnection,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Return a deferred query on our storage
            </summary>
            <typeparam name="T">Type of data being returned for each row</typeparam>
            <param name="queryCallback">First query callback</param>
            <returns>An instance of a IDeferredQuery instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ISqlConnectionService.DeferredQuery``2(System.Func{Microsoft.VisualStudio.Workspace.Indexing.ISqlConnection,System.Collections.Generic.IEnumerable{``1}},System.Func{Microsoft.VisualStudio.Workspace.Indexing.ISqlConnection,``1,``0})">
            <summary>
            Return a deferred query on our storage
            </summary>
            <typeparam name="T">Type of data being returned for each row</typeparam>
            <typeparam name="Q">Type of data being returned by the first query</typeparam>
            <param name="queryCallback">First query callback</param>
            <param name="itemAdapter">Adapter callback to return the result type</param>
            <returns>An instance of a IDeferredQuery instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ISqlConnectionService.ExecuteAsync(System.Func{Microsoft.VisualStudio.Workspace.Indexing.ISqlConnection,System.Int32})">
            <summary>
            Execute a statement on our database
            </summary>
            <param name="executeCallback">The execute callback</param>
            <returns>Completion task with affected rows</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.ISymbolService">
            <summary>
            A symbol type service
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.ISymbolService.FindSymbolDefinitionsAsync(System.String,System.IProgress{Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinitionSearchResult},System.Threading.CancellationToken,System.String)">
            <summary>
            Searches for symbol definitions that match a given query.
            </summary>
            <param name="query">A leading substring of the symbol to find.</param>
            <param name="progress">Receives </param>
            <param name="cancellationToken">A token that may cancel the search.</param>
            <param name="currentDocument">Optional current document path.</param>
            <returns>A task whose completion indicates the search is complete.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.RenameFileEntityChangedEventArgs">
            <summary>
            Renamed version of <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.FileEntityChangedEventArgs"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.RenameFileEntityChangedEventArgs.#ctor(System.String,System.String,Microsoft.VisualStudio.Workspace.Indexing.FileEntityChanged,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.RenameFileEntityChangedEventArgs"/> class.
            </summary>
            <param name="oldPath">Original path of the entity</param>
            <param name="newPath">New path of the entity</param>
            <param name="changeType">Change type</param>
            <param name="isFile">If entity is a file</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.RenameFileEntityChangedEventArgs.OldPath">
            <summary>
            Old path for the entity
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility">
            <summary>
            Describes the visibility of the symbol to surrounding code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility.Public">
            <summary>
            The symbol has public visibility.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility.Internal">
            <summary>
            The symbol has internal visibility.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility.Friend">
            <summary>
            The symbol has friend visibility.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility.Protected">
            <summary>
            The symbol has protected visibility.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility.Private">
            <summary>
            The symbol has private visibility.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition">
            <summary>
            Describes the definition of a symbol, within the context of a source file.
            </summary>
            <remarks>
            This interface does not specify the path to the source file because some
            of its producers (e.g. <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.IFileScanner"/> may not know the path
            to the source file. Also, some source files may not even exist locally,
            so setting the context of which file the symbol appears in is the
            responsibility of other code that hands this interface around.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.#ctor(System.String,Microsoft.VisualStudio.Workspace.Indexing.SymbolKind,Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility,Microsoft.VisualStudio.Workspace.Indexing.TextLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition"/> class.
            </summary>
            <param name="name">The name of the symbol.</param>
            <param name="kind">The kind of symbol.</param>
            <param name="accessibility">The visibility of the symbol to surrounding code.</param>
            <param name="location">The location of the definition.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.#ctor(System.String,System.String,Microsoft.VisualStudio.Workspace.Indexing.SymbolKind,Microsoft.VisualStudio.Workspace.Indexing.SymbolAccessibility,Microsoft.VisualStudio.Workspace.Indexing.TextLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition"/> class.
            </summary>
            <param name="name">The name of the symbol.</param>
            <param name="fullyQualifiedName">The fully-qualified name of the symbol.</param>
            <param name="kind">The kind of symbol.</param>
            <param name="accessibility">The visibility of the symbol to surrounding code.</param>
            <param name="location">The location of the definition.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.Name">
            <summary>
            Gets the short name of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.FullyQualifiedName">
            <summary>
            Gets the fully-qualified name of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.Location">
            <summary>
            Gets the position of the symbol's definition within the source file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.Kind">
            <summary>
            Gets the kind of symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.Accessibility">
            <summary>
            Gets the accessibility of the symbol.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition.Equals(Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinitionSearchResult">
            <summary>
            Describes a symbol's definition with metadata describing where it is found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinitionSearchResult.#ctor(Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinition,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinitionSearchResult"/> class.
            </summary>
            <param name="symbol">The symbol definition.</param>
            <param name="filePath">The path to the file that defines the symbol.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinitionSearchResult.Symbol">
            <summary>
            Gets the symbol name and location.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.SymbolDefinitionSearchResult.FilePath">
            <summary>
            Gets the absolute path to the file containing the symbol.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind">
            <summary>
            Describes the various types of symbols.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Class">
            <summary>
            A class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Constant">
            <summary>
            A constant.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Delegate">
            <summary>
            A delegate.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Enum">
            <summary>
            An enumerator.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.EnumItem">
            <summary>
            A member of an enumerator.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Event">
            <summary>
            An event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Field">
            <summary>
            A field.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Interface">
            <summary>
            An interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Method">
            <summary>
            A method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Module">
            <summary>
            A module.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Property">
            <summary>
            A property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Structure">
            <summary>
            A structure.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Indexing.SymbolKind.Namespace">
            <summary>
            A namespace
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.SymbolScannerBase">
            <summary>
            Symbol scanner base class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolScannerBase.ScanContentAsync``1(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.SymbolScannerBase.ScanSymbolsAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            perform a symbol scanning on a file content
            </summary>
            <param name="sourceFileContent">the content of source file</param>
            <param name="cancellationToken">a cancellation token</param>
            <returns>Symbols found during scanning</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Indexing.TextLocation">
            <summary>
            Describes a location in a text file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.TextLocation"/> struct.
            </summary>
            <param name="line">The line number in the text file. Starts at 1.</param>
            <param name="column">The column number in the text file. Starts at 1.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.Line">
            <summary>
            Gets the line number within the text file.
            The first line of a file is considered Line 1.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.Column">
            <summary>
            Gets the column within the text file.
            The first column on a line is considered column 1.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.op_Equality(Microsoft.VisualStudio.Workspace.Indexing.TextLocation,Microsoft.VisualStudio.Workspace.Indexing.TextLocation)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.TextLocation"/> are equal.
            </summary>
            <param name="a">First <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.TextLocation"/></param>
            <param name="b">Second <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.TextLocation"/></param>
            <returns><code>true</code> if the two <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.TextLocation"/> are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.op_Inequality(Microsoft.VisualStudio.Workspace.Indexing.TextLocation,Microsoft.VisualStudio.Workspace.Indexing.TextLocation)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.TextLocation"/> are not equal.
            </summary>
            <param name="a">First <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.TextLocation"/></param>
            <param name="b">Second <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.TextLocation"/></param>
            <returns><code>true</code> if the two <see cref="T:Microsoft.VisualStudio.Workspace.Indexing.TextLocation"/> are not equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.Equals(Microsoft.VisualStudio.Workspace.Indexing.TextLocation)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Indexing.TextLocation.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.INotifyFileContextChanged">
            <summary>
            Interface to provide an action when a file context has been modified
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.INotifyFileContextChanged.OnFileContextChanged">
            <summary>
            When the File Context has changed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Intellisense.ExportLanguageServiceProviderAttribute">
            <summary>
            Exports an <see cref="T:Microsoft.VisualStudio.Workspace.Intellisense.ILanguageServiceProvider"/> to the MEF catalog
            with metadata as described by <see cref="T:Microsoft.VisualStudio.Workspace.Intellisense.ILanguageServiceProviderMetadata"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Intellisense.ExportLanguageServiceProviderAttribute.#ctor(System.String,Microsoft.VisualStudio.Workspace.ProviderPriority,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Intellisense.ExportLanguageServiceProviderAttribute"/> class.
            </summary>
            <param name="type">The unique type for this ILanguageServiceProviderMetadata</param>
            <param name="priority">The provider priority</param>
            <param name="supportedContextTypeGuids">
            A collection of GUIDs that identify the <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/> values
            that this language service can initialize from.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Intellisense.ExportLanguageServiceProviderAttribute.SupportedContextTypes">
            <summary>
            Gets a collection of GUIDs that identify the <see cref="P:Microsoft.VisualStudio.Workspace.FileContext.ContextType"/> values
            that this language service can initialize from.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Intellisense.ExportLanguageServiceProviderAttribute.OptionFlagsInternal">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Intellisense.ILanguageServiceProvider">
            <summary>
            Offers language service activation for open files.
            </summary>
            <remarks>
            An implementing type should export this interface with
            the <see cref="T:Microsoft.VisualStudio.Workspace.Intellisense.ExportLanguageServiceProviderAttribute"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Intellisense.ILanguageServiceProvider.InitializeAsync(System.String,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Workspace.FileContext},System.Threading.CancellationToken)">
            <summary>
            Initializes the language service for the specified file, or updates it with a new set of contexts.
            </summary>
            <param name="filePath">The absolute path of the file to initialize the language service for.</param>
            <param name="fileContexts">The contexts available for this file.</param>
            <param name="cancellationToken">A token that may cancel initialization of the language service.</param>
            <returns>A task that tracks the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Intellisense.ILanguageServiceProvider.UninitializeAsync(System.String)">
            <summary>
            Removes the language service integration for the specified file.
            </summary>
            <param name="filePath">The absolute path of the file to initialize the language service for.</param>
            <returns>A task that tracks the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Intellisense.ILanguageServiceProviderMetadata">
            <summary>
            Describes an <see cref="T:Microsoft.VisualStudio.Workspace.Intellisense.ILanguageServiceProvider"/> extension's applicability and capabilities.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IPropertySettings">
            <summary>
            IPropertySettings interface
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IProviderMetadataBase">
            <summary>
            Provider Metadata Base
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IProviderMetadataBase.Version">
            <summary>
            Version tracking
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IProviderMetadataBase.Type">
            <summary>
            The Unique Type for this Provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IProviderMetadataBase.Priority">
            <summary>
            Provider priority
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IProviderMetadataBase.OptionFlags">
            <summary>
            The Options defined for this metadata as flags attribute
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ISupportedTypesMetadata">
            <summary>
            Supported types metadata
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ISupportedTypesMetadata.SupportedTypes">
            <summary>
            Gets the set of supported types by this metadata
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceFileMatcher">
            <summary>
            file matcher. Applies as set of [glob] rules against the file name;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceFileMatcher.IsMatch(System.String,System.Boolean)">
            <summary>
            Match an item against the rules
            </summary>
            <param name="fullPath">fullPath of the item</param>
            <param name="isFolder">item is a folder</param>
            <returns>true, item is filtered out</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilter">
            <summary>
            Workspace (settings based) Item Filter;
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilter.FilterKey">
            <summary>
            the filter key (used to create this filter by IWorkspaceItemFilterService).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilter.OnFilterChanged">
            <summary>
            Fires when filter settings (may have) changed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilter.IsFiltered(System.String,System.Boolean)">
            <summary>
            Check a single item against the filter
            </summary>
            <param name="fullPath">full path to the item (file or folder) we want to check</param>
            <param name="isFolder">true to consider path a folder, false a file</param>
            <returns>true if items is "filtered out" by current filter settings</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilter.IsFiltered(System.String)">
            <summary>
            Check a single item against the filter. The item must exist on disk.
            </summary>
            <param name="fullPath">full path to the item (file or folder) we want to check</param>
            <returns>true if items is "filtered out" by current filter settings</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilter.IsFilteredRecursive(System.String,System.Boolean)">
            <summary>
            Check a single item against the filter. This will also check if any parent folder is filtered out.
            </summary>
            <param name="fullPath">full path to the item (file or folder) we want to check</param>
            <param name="isFolder">true to consider path a folder, false a file</param>
            <returns>true if items is "filtered out" by current filter settings</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilter.IsFilteredRecursive(System.String)">
            <summary>
            Check a single item against the filter. The item must exist on disk. This will also check if any parent folder is filtered out.
            </summary>
            <param name="fullPath">full path to the item (file or folder) we want to check</param>
            <returns>true if items is "filtered out" by current filter settings</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilterService">
            <summary>
            Workspace Item Filter service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilterService.GetItemFilter(System.String)">
            <summary>
            Gets the Item Filter object for the given filterKey.
            </summary>
            <param name="filterKey">the item filter key.The "filterKey" is used as a name of the string array property in the Generic Workspace settings
            that contains individual filter patterns.</param>
            <returns>item filter object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ItemFilters.IWorkspaceItemFilterService.CreateFileMatcher(System.Collections.Generic.IReadOnlyCollection{System.String},System.String)">
            <summary>
            Create file matcher from list or glob rules.
            </summary>
            <param name="globRules">list of rules</param>
            <param name="root">implied root for the rules, if null that will be workspace root</param>
            <returns>the implementing object</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ItemFilters.WorkspaceItemFilterChangedEventArgs">
            <summary>
            Filters change event data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ItemFilters.WorkspaceItemFilterChangedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ItemFilters.WorkspaceItemFilterChangedEventArgs"/> class.
            </summary>
            <param name="scopePath">affected cone</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ItemFilters.WorkspaceItemFilterChangedEventArgs.ScopePath">
            <summary>
            Full path. the ScopePath is the "root" of a subtree that is being (potentially) affected by the changes.
            All items outside the ScopePath cone are not affected by the changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IWorkspace">
            <summary>
            IWorkspace interface definition
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IWorkspace.Location">
            <summary>
            Gets the path to the root directory of the source tree.
            </summary>
            <value>An absolute path.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IWorkspace.JTF">
            <summary>
            Instance of <code>JoinableTaskFactory</code> associated with JTFCollection.
            Use IWorkspace.JTF to start async work (instead of Task.Run).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.MakeRooted(System.String)">
            <summary>
            Gets the absolute path for a given path, which may be relative to Workspace.Location.
            </summary>
            <param name="subPath">
            The path that is absolute, or relative to the workspace root folder.
            May be empty.
            </param>
            <returns>An absolute path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.MakeRelative(System.String)">
            <summary>
            Converts an absolute path to a path relative to the root of this workspace.
            </summary>
            <param name="path">The path to make relative.</param>
            <returns>A relative path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.GetFileContextsAsync(System.String,System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Gets the file contexts associated with the specified workspace location.
            </summary>
            <param name="path">
            The path to the file or folder for which a context is required.
            May be absolute or relative to workspace root <see cref="P:Microsoft.VisualStudio.Workspace.IWorkspace.Location"/>.
            </param>
            <param name="fileContextTypes">The collection of file context types of interest of the caller.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The collection of applicable file context providers.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.GetFileContextsAsync``1(System.String,``0,System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Get file contexts for a workspace context
            </summary>
            <param name="path">
            The path to the file or folder for which a context is required.
            May be absolute or relative to workspace root <see cref="P:Microsoft.VisualStudio.Workspace.IWorkspace.Location"/>.
            </param>
            <typeparam name="T">Type of the workspace context being passed</typeparam>
            <param name="context">Instance of the workspace context</param>
            <param name="fileContextTypes">The collection of file context types of interest to the caller.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The collection of applicable file context providers.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.GetFileContextsForLanguageServicesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Return matched ILanguageServiceProvider's for a file context path
            </summary>
            <param name="filePath">Absolute path of the file which will provide the context</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Collection with matched services with it's file contexts</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.GetFileContextActionsAsync(System.String,System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Gets the actions available at the specified path.
            </summary>
            <param name="path">
            The path to the file or folder for which a context is required.
            May be absolute or relative to workspace root <see cref="P:Microsoft.VisualStudio.Workspace.IWorkspace.Location"/>.
            </param>
            <param name="fileContextTypes">Optional list of file context types</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            A task whose result is a collection of actions that can be taken on the specified <paramref name="path"/>.
            The collection should never be null, but it may be empty.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.GetFileContextActionsAsync``1(System.String,``0,System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Gets the actions available on a workspace context
            </summary>
            <typeparam name="T">Type of the workspace context</typeparam>
            <param name="path">
            The path to the file or folder for which a context is required.
            May be absolute or relative to workspace root <see cref="P:Microsoft.VisualStudio.Workspace.IWorkspace.Location"/>.
            </param>
            <param name="context">The instance of the workspace context</param>
            <param name="fileContextTypes">Optional list of file context types</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>Actions available</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.GetActionsForContextsAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Workspace.FileContext},System.Threading.CancellationToken)">
            <summary>
            Gets actions that apply to a set of file contexts
            </summary>
            <param name="filePath">File path of the target</param>
            <param name="fileContexts">List of file contexts</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>List of actions to apply to the file contexts</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.GetFilesAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a set of files within the workspace.
            </summary>
            <param name="subPath">
            The folder within the workspace that should be searched for files.
            May be absolute, or relative to the <see cref="P:Microsoft.VisualStudio.Workspace.IWorkspace.Location"/>.
            An empty path is interpreted as the workspace root.
            </param>
            <param name="recursive">
            <c>true</c> to return files in <paramref name="subPath"/> and its sub-folders;
            <c>false</c> to return only files found in the immediate folder.
            </param>
            <param name="cancellationToken">A token that cancels the query.</param>
            <returns>A task whose result is the set of files found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspace.GetDirectoriesAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a set of directories within the workspace.
            </summary>
            <param name="subPath">
            The folder within the workspace that should be searched for directories.
            May be absolute, or relative to the <see cref="P:Microsoft.VisualStudio.Workspace.IWorkspace.Location"/>.
            An empty path is interpreted as the workspace root.
            </param>
            <param name="recursive">
            <c>true</c> to return files in <paramref name="subPath"/> and its sub-folders;
            <c>false</c> to return only files found in the immediate folder.
            </param>
            <param name="cancellationToken">A token that cancels the query.</param>
            <returns>A task whose result is the set of files found.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IWorkspace2">
            <summary>
            Interface to extend <see cref="T:Microsoft.VisualStudio.Workspace.IWorkspace"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IWorkspace2.DisposeToken">
            <summary>
            The workspace dispose token
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IWorkspaceProviderFactory`1">
            <summary>
            Provider workspace factory
            </summary>
            <typeparam name="T">Type of provider to create</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspaceProviderFactory`1.CreateProvider(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Create an instance of provider
            </summary>
            <param name="workspaceContext">The workspace context</param>
            <returns>Created instance of a provider type</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IWorkspaceServiceFactory">
            <summary>
            Workspace service factory
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.IWorkspaceServiceFactory.CreateService(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Create an instance of a service in the context of a IWorkspace
            </summary>
            <param name="workspaceContext">The workspace context instance</param>
            <returns>The Service instance</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.IWorkspaceServiceFactoryMetadata">
            <summary>
            IWorkspaceServiceFactoryMetadata interface
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.IWorkspaceServiceFactoryMetadata.Options">
            <summary>
            Workspace service factory options
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Logging.LoggerListener">
            <summary>
            Logger listener delegate
            </summary>
            <param name="logRecord">Log Record generated</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Logging.Logger">
            <summary>
            Workspace Logger class
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.Logger.CurrentLevel">
            <summary>
            CurrentLevel Singleton property
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.Logger.Loggers">
            <summary>
            List of loggers available
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.Logger.Name">
            <summary>
            Name property
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.Logger.Level">
            <summary>
            Level property
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.ToLoggingLevel(System.Diagnostics.TraceLevel)">
            <summary>
            Return the Logging level from a Diagnostic level
            </summary>
            <param name="level">Teh diagnostic level to be converted</param>
            <returns>The closer Logging level</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.GetLogger(System.String)">
            <summary>
            Create a logger instance using a name
            </summary>
            <param name="name">name of the logger</param>
            <returns>a Logger class instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.AddListener(Microsoft.VisualStudio.Workspace.Logging.LoggerListener)">
            <summary>
            Add a logger listener delegate
            </summary>
            <param name="listener">listener delegate instance</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.RemoveListener(Microsoft.VisualStudio.Workspace.Logging.LoggerListener)">
            <summary>
            Remove a logger listener delegate
            </summary>
            <param name="listener">listener delegate instance</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.Log(Microsoft.VisualStudio.Workspace.Logging.LoggingLevel,System.String,System.Object[])">
            <summary>
            Log a message.
            </summary>
            <param name="level">level desired for this message</param>
            <param name="message">Message being logged</param>
            <param name="messageArguments">Message arguments being passed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.Log(System.Boolean,Microsoft.VisualStudio.Workspace.Logging.LoggingLevel,System.String,System.Object[])">
            <summary>
            Log a message.
            </summary>
            <param name="piiCompliant">If the message is PII compliant</param>
            <param name="level">level desired for this message</param>
            <param name="message">Message being logged</param>
            <param name="messageArguments">Message arguments being passed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.IsEnabled(Microsoft.VisualStudio.Workspace.Logging.LoggingLevel)">
            <summary>
            Return true if a logging level is enabled
            </summary>
            <param name="level">level desired to evaluate</param>
            <returns>true if the level is enabled</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.Error(System.String,System.Object[])">
            <summary>
            Log a Error level message.
            </summary>
            <param name="message">Message being logged</param>
            <param name="messageArguments">Message arguments being passed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.Warning(System.String,System.Object[])">
            <summary>
            Log a Warning level message.
            </summary>
            <param name="message">Message being logged</param>
            <param name="messageArguments">Message arguments being passed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.Debug(System.String,System.Object[])">
            <summary>
            Log a Debug level message.
            </summary>
            <param name="message">Message being logged</param>
            <param name="messageArguments">Message arguments being passed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.Info(System.String,System.Object[])">
            <summary>
            Log a Info level message.
            </summary>
            <param name="message">Message being logged</param>
            <param name="messageArguments">Message arguments being passed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.LoggerInstance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Logging.Logger.LoggerInstance"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.Logger.LoggerInstance.Level">
            <summary>
            Logging level property
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.LoggerInstance.AddListener(Microsoft.VisualStudio.Workspace.Logging.LoggerListener)">
            <summary>
            Add a logger listener delegate
            </summary>
            <param name="listener">listener delegate instance</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.LoggerInstance.RemoveListener(Microsoft.VisualStudio.Workspace.Logging.LoggerListener)">
            <summary>
            Remove a logger listener delegate
            </summary>
            <param name="listener">listener delegate instance</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.Logger.LoggerInstance.LogInternal(Microsoft.VisualStudio.Workspace.Logging.Logger,Microsoft.VisualStudio.Workspace.Logging.LoggingLevel,System.String,System.Boolean)">
            <summary>
            Log internal
            </summary>
            <param name="logger">the Logger instance</param>
            <param name="level">level desired</param>
            <param name="message">Message being logged</param>
            <param name="piiCompliant">If message is PII compliant</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel">
            <summary>
            Logging level enumeration
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel.Off">
            <summary>
            Logging is off
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel.Fatal">
            <summary>
            Fatal level
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel.Error">
            <summary>
            Error level
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel.Warn">
            <summary>
            Warning level
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel.Info">
            <summary>
            Info level
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel.Debug">
            <summary>
            Debug level
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Logging.LoggingLevel.Trace">
            <summary>
            Trace level
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Logging.LogRecord">
            <summary>
            LogRecord class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Logging.LogRecord.#ctor(Microsoft.VisualStudio.Workspace.Logging.Logger,Microsoft.VisualStudio.Workspace.Logging.LoggingLevel,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Logging.LogRecord"/> class.
            </summary>
            <param name="logger">Logger instance</param>
            <param name="level">desired level</param>
            <param name="message">Message being logged</param>
            <param name="piiCompliant">true if the message is PII compliant</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.LogRecord.Logger">
            <summary>
            Logger instance who generated this Record
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.LogRecord.Level">
            <summary>
            Logging level of the Record
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.LogRecord.Timestamp">
            <summary>
            When logging happened
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.LogRecord.ThreadId">
            <summary>
            Managed thread id of Record
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.LogRecord.Message">
            <summary>
            Message being logged
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Logging.LogRecord.PiiCompliant">
            <summary>
            PII compliant
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.NotifyFileContextChangedHelper">
            <summary>
            Class NotifyFileContextChanged
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.NotifyFileContextChangedHelper.#ctor(System.Action{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.NotifyFileContextChangedHelper"/> class.
            </summary>
            <param name="onNotifyFileContextChanged">Callback action when subscriptions changed</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.NotifyFileContextChangedHelper.IsSink">
            <summary>
            If we are sink to the source
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.NotifyFileContextChangedHelper.OnInvocationListChanged(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.PauseToken">
            <summary>
            A pause token
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PauseToken.#ctor(Microsoft.VisualStudio.Workspace.PauseTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.PauseToken"/> struct.
            </summary>
            <param name="source">token source</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.PauseToken.IsPaused">
            <summary>
            IsPaused property
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PauseToken.WaitWhilePausedAsync">
            <summary>
             Wait if the token source is paused
            </summary>
            <returns>Completion task</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.PauseTokenSource">
            <summary>
            A source token to allow pausing a task
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.PauseTokenSource.CompletedTask">
            <summary>
            Completed task helper
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.PauseTokenSource.IsPaused">
            <summary>
            IsPaused property
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.PauseTokenSource.Token">
            <summary>
            The Token property
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.PauseTokenSource.CancellationToken">
            <summary>
            An optional cancellation token to be use on our pause task
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PauseTokenSource.Pause">
            <summary>
            Pause request
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PauseTokenSource.Resume">
            <summary>
            Resume request
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PauseTokenSource.WaitWhilePausedAsync">
            <summary>
            Wait if we are paused
            </summary>
            <returns>Completion task</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ProjectConfiguration">
            <summary>
            Class ProjectConfiguration
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ProjectConfiguration.#ctor(System.String,System.String,Microsoft.VisualStudio.Workspace.IPropertySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ProjectConfiguration"/> class.
            </summary>
            <param name="projectFile">The project file path</param>
            <param name="target">Optional target</param>
            <param name="launchSettings">Launch settings</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ProjectConfiguration.LaunchSettings">
            <summary>
            Launch settings
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ProjectConfigurationManagerProperties">
            <summary>
            Change type enumeration
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProjectConfigurationManagerProperties.AllProjectFileConfigurations">
            <summary>
            AllProjectFileConfigurations property changed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProjectConfigurationManagerProperties.CurrentProject">
            <summary>
            Current Active Project
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProjectConfigurationManagerProperties.CurrentDebugContextAction">
            <summary>
            Current Debug Context Action
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProjectConfigurationManagerProperties.CurrentBuildContextAction">
            <summary>
            Current Build Context Action
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ProjectTargetFileContext">
            <summary>
            Project target file context
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ProjectTargetFileContext.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ProjectTargetFileContext"/> class.
            </summary>
            <param name="projectFilePath">Project File path</param>
            <param name="target">Target in the project file</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ProjectTargetFileContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ProjectTargetFileContext"/> class.
            </summary>
            <param name="projectFile">Project File</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ProjectTargetFileContext.FilePath">
            <summary>
            Relative workspace path
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ProjectTargetFileContext.Target">
            <summary>
            Target of the project file
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ProjectTargetFileContext.Equals(Microsoft.VisualStudio.Workspace.ProjectTargetFileContext)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ProjectTargetFileContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ProjectTargetFileContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.PropertyChangedEventArgs`1">
            <summary>
            PropertyChangedEventArgs class
            </summary>
            <typeparam name="T">Properties type</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertyChangedEventArgs`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.PropertyChangedEventArgs`1"/> class.
            </summary>
            <param name="properties">Array of properties that changed</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.PropertyChangedEventArgs`1.Properties">
            <summary>
            The property that changed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertyChangedEventArgs`1.HasProperty(`0)">
            <summary>
            Return true if this event contains a change for a property
            </summary>
            <param name="property">The property id</param>
            <returns>true if the property is part of this event</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertyChangedEventArgs`1.HasAnyProperties(`0[])">
            <summary>
            If any properties is contained in the changes
            </summary>
            <param name="properties">Array of properties to check</param>
            <returns>True if any of the property is found</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.PropertySettings">
            <summary>
            Default IPropertySettings implementation
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.PropertySettings.EmptySettings">
            <summary>
            Empty settings
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettings.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.PropertySettings"/> class.
            </summary>
            <param name="settings">Array of KeyValuePair to initialize</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.PropertySettings"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.PropertySettings.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettings.Add(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.PropertySettingsHelper">
            <summary>
            Helper class for the type IPropertySettings
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.CreateValuePair(System.String,System.Object)">
            <summary>
            Create a KeyValuePair class
            </summary>
            <param name="key">String key</param>
            <param name="value">Object value</param>
            <returns>A Key value pair</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.Copy(Microsoft.VisualStudio.Workspace.IPropertySettings,System.Func{Microsoft.VisualStudio.Workspace.IPropertySettings})">
            <summary>
            Deep copy of a configuration instance
            </summary>
            <param name="settings">The input settings instance</param>
            <param name="factory">Factory creator for IPropertySettings</param>
            <returns>Copy of the configuration instance</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.GetValue``1(Microsoft.VisualStudio.Workspace.IPropertySettings,System.String)">
            <summary>
            Get Value of type (T)
            </summary>
            <typeparam name="T">Desired type expected</typeparam>
            <param name="settings">The input settings instance</param>
            <param name="key">Key to look for in the configuration</param>
            <returns>The value contained in the settings</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.GetPathValue``1(Microsoft.VisualStudio.Workspace.IPropertySettings,System.String[])">
            <summary>
            Retrieve a value using a path
            </summary>
            <typeparam name="T">Desired type expected</typeparam>
            <param name="settings">The input settings instance</param>
            <param name="keys">Path of keys</param>
            <returns>The value contained in the settings</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.TryGetValue``1(Microsoft.VisualStudio.Workspace.IPropertySettings,System.String,``0@)">
            <summary>
            TryGetValue pattern extension
            </summary>
            <typeparam name="T">Desired type expected</typeparam>
            <param name="settings">The setting instance</param>
            <param name="key">Key to look for in the configuration</param>
            <param name="value">The value in the setting entry</param>
            <returns>true if key was found</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.GetValue``1(Microsoft.VisualStudio.Workspace.IPropertySettings,System.String,``0)">
            <summary>
            Get Value of type (T)
            </summary>
            <typeparam name="T">Desired type expected</typeparam>
            <param name="settings">The setting instance</param>
            <param name="key">Key to look for in the configuration</param>
            <param name="defaultValue">Default value to provide if no value is found</param>
            <returns>The value contained in the configuration or the default value being passed</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.GetValues(Microsoft.VisualStudio.Workspace.IPropertySettings,System.Object,System.Reflection.PropertyInfo[],System.Func{System.String,System.String})">
            <summary>
            GetValues using Reflection API
            </summary>
            <param name="settings">The setting instance</param>
            <param name="target">Target object to set values</param>
            <param name="properties">List of property infos to populate</param>
            <param name="propertyNameConverter">An optional property name converter</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.GetValues(Microsoft.VisualStudio.Workspace.IPropertySettings,System.Object,System.Reflection.BindingFlags,System.Func{System.String,System.String})">
            <summary>
            GetValues using Reflection API
            </summary>
            <param name="settings">The setting instance</param>
            <param name="target">Target object to set values</param>
            <param name="bindingAttr">Binding flags of target</param>
            <param name="propertyNameConverter">An optional property name converter</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.SetValues(Microsoft.VisualStudio.Workspace.IPropertySettings,System.Object,System.Reflection.PropertyInfo[],System.Func{System.String,System.String})">
            <summary>
            SetValues using Reflection API
            </summary>
            <param name="settings">The setting instance</param>
            <param name="source">Source object to get values</param>
            <param name="properties">List of property infos to populate</param>
            <param name="propertyNameConverter">An optional property name converter</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.SetValues(Microsoft.VisualStudio.Workspace.IPropertySettings,System.Object,System.Reflection.BindingFlags,System.Func{System.String,System.String})">
            <summary>
            SetValues using Reflection API
            </summary>
            <param name="settings">The setting instance</param>
            <param name="source">Source object to get values</param>
            <param name="bindingAttr">Binding flags of target</param>
            <param name="propertyNameConverter">An optional property name converter</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PropertySettingsHelper.GetPropertyInfos(System.Type,System.String[])">
            <summary>
            Return an array of PropertyInfo from a type
            </summary>
            <param name="type">The type class</param>
            <param name="propertyNames">List of property names</param>
            <returns>Array of PropertyInfo types</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ProviderPriority">
            <summary>
            Priority enumeration for Providers
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProviderPriority.Lowest">
            <summary>
            Lowest priority
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProviderPriority.BelowNormal">
            <summary>
            BelowNormal priority
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProviderPriority.Normal">
            <summary>
            Normal priority
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProviderPriority.AboveNormal">
            <summary>
            AboveNormal priority
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.ProviderPriority.Highest">
            <summary>
            Highest priority
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.ResultEventArgs`1">
            <summary>
            Result Event arguments class
            </summary>
            <typeparam name="T">Type of result being fired</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.ResultEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.ResultEventArgs`1"/> class.
            </summary>
            <param name="result">The result instance</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.ResultEventArgs`1.Result">
            <summary>
            The result instance
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsResult">
            <summary>
            Result of retrieving a single setting value from the current settings files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsResult.Success">
            <summary>
            the value was successfully read from a settings file. This result means there is a such an element set in settings file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsResult.Undefined">
            <summary>
            The value is not present in the settings file. A default value is returned instead.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsResult.Error">
            <summary>
            The value is present in the settings file, but it is corrupted (for example wrong type). A default value is returned instead.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings">
            <summary>
            Workspace Settings interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings.ScopePath">
            <summary>
            Get the absolute path for the property scope where definition originate.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings.Parent">
            <summary>
            Parent (lower priority) Settings wrapper.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings.GetProperty``1(System.String,``0@,Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings@,``0)">
            <summary>
            get a [base] settings value (property), the type and meaning of the value is defined by the caller.
            This override also specifies the particular settings source that provided the value.
            Used in cases where implied root is needed, or when doing "unification" for arrays.
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <param name="key">the name of the property</param>
            <param name="value">the current value as persisted in the settings</param>
            <param name="originator">the workspace settings source that is providing the value.</param>
            <param name="defaultValue">optional default value to use if the current value is not present or corrupted</param>
            <returns>see WorkspaceSettingsResult</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsFileProvider">
            <summary>
            Dynamic settings providers
            These providers contribute properties to the hierarchical settings collection that comes from a different sources than on disk json files.
            Example can be "intrinsic in memory providers" or "converters" (components that parse other tools formats into a Workspace settings schema).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsFileProvider.GetSettingsFiles(System.String,System.String)">
            <summary>
            Provide zero or more workspace schema settings collections to be merged with the rest of the Workpace's sources.
            </summary>
            <param name="type">settings type (corresponding to the independent settings file name) Use SettingsTypes class constants</param>
            <param name="scopePath">location under workspace we require the settings for. </param>
            <returns>settings readers</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsManager">
            <summary>
            Per workspace object that is responsible for facilitating the reading and writing the workspace settings as well as corresponding notifications.
            Retrieved by "Workspace.SettingsManager".
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsManager.OnWorkspaceSettingsChanged">
            <summary>
            Event fire when a setting source (a file or in memory provider) changes.
            Listeners would need to reacquire (via GetAggregatedSettingsAsync) a new settings collection if they need to reflect the settings changes.
            The SettingsChangedEventArgs parameter can be used to narrow down the changes to a particular settings type and scopePath.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsManager.GetAggregatedSettings(System.String,System.String)">
             <summary>
             the settings reader (note that when reading the settings hierarchy is already applied, the consumer should not differentiate between where property is defined on use).
             The object returned by this property is immutable. when changes happen a new object will be create (and OnWorkspaceSettingsChanged fired).
            
             will apply build in inheritance override rules(aka PerUser > PerWorkspace > PerMachine) and return the winning value for a named property, array or child settings
             </summary>
             <param name="type">settings type (corresponding to the independent settings file name) Use SettingsTypes class constants</param>
             <param name="scopePath">location under workspace we require the settings for. Note that because of hierarchical aggregation model different parts of the workspace tree will have
             different settings values.
             </param>
             <returns>settings reader</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsManager.GetSettings(System.String)">
            <summary>
            "Parse" a single settings file.
            </summary>
            <param name="settingsFile">the full path to a settings file</param>
            <returns>the settings object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsManager.GetPersistanceAsync(System.Boolean)">
            <summary>
            Access the settings writer. All changes made are in memory until the writer is released.
            note we will not lock any of the settings files until commit. Also we are not going to lock the writer within the process.
            the individual actions (like individual property writes) will be protected.
            We would ensure a machine-wise locking via named event, which will protect against multiple VS instance writing at the same time,
            yet it would be possible if via other editor (notepad) or when settings file is shared on network, to have a conflicting writes.
            in this rare case commit may still fail.
            </summary>
            <param name="autoCommit">if true the caller does not need to call commit at the end (note it is still possible to abort)</param>
            <returns>the persistence instance</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsPersistance">
            <summary>
            transactional writer. Note within the single VS process multiple of this can be active simultaneously.
            Last release will trigger settings file writes on disk. It is expected that the persistence writer wrappers to be very short lived.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsPersistance.GetWriter(System.String,System.String)">
            <summary>
            Get a writer for a single file.
            </summary>
            <param name="type">settings tuple (corresponding to the independent settings file name) Use SettingsTypes class constants</param>
            <param name="location">(relative) location under workspace root where to place the file.
            null = "per user /per workspace" (under our .vs folder)
            Empty = "workspace root".
            </param>
            <returns>writer</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsPersistance.Commit">
            <summary>
            notify that writing was successful for this scope. Needed if autoCommit was false, otherwise closing the scope will cause entire write transaction
            to be canceled. Used by features that needs to write multiple related properties when a partial persistence may cause inconsistent results.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsPersistance.Abort">
            <summary>
            Abort setting writing transaction. The settings files will not be updated on disk
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsProvider">
            <summary>
            Dynamic settings providers
            These providers contribute properties to the hierarchical settings collection that comes from a different sources than on disk json files.
            Example can be "intrinsic in memory providers" or "converters" (components that parse other tools formats into a Workspace settings schema).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsProvider.OnWorkspaceSettingsChanged">
            <summary>
            Event fire when a settings source managed by the particular provider changes.
            The Settings manager will monitor this events and will propagate them to consumers as required.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsProvider.GetSingleSettings(System.String,System.String)">
            <summary>
            Provide a workspace schema settings collection to be merged with the rest of the Workspace's sources.
            Note provider should only provide a single source that applies only to the "scopePath".
            </summary>
            <param name="type">settings type (corresponding to the independent settings file name) Use SettingsTypes class constants</param>
            <param name="scopePath">location under workspace we require the settings for. </param>
            <returns>settings reader</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsProvider.DisposeAsync">
            <summary>
            called when workspace is disposed. The provider should disconnect listeners to other IWorkspace related components here, release resource and such.
            The potentially cached IWorkspace is available to be used, but some functionality may not work (for example it is likely attempting to use SymbolsService will fail)
            </summary>
            <returns>async task</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsProviderFactory">
             <summary>
             Dynamic settings providers
             These providers contribute properties to the hierarchical settings collection that comes from a different sources than on disk json files.
             Example can be "intrinsic in memory providers" or "converters" (components that parse other tools formats into our settings schema).
            
             The factory interface is
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsProviderFactory.Priority">
            <summary>
            the priority property is used to order the provider settings among other potential providers that can apply for the exact same location.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsProviderFactory.CreateSettingsProvider(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Create provider object for the given workspace instance
            </summary>
            <param name="workspace">workspace that will query for the settings</param>
            <returns>settings reader</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSource">
            <summary>
            Workspace Settings interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSource.GetKeys">
            <summary>
            Enumerate all available property names.
            </summary>
            <returns>property names enumerator</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSource.GetProperty``1(System.String,``0@,``0)">
            <summary>
            get a [base] settings value (property), the type and meaning of the value is defined by the caller.
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <param name="key">the name of the property</param>
            <param name="value">the current value as persisted in the settings</param>
            <param name="defaultValue">optional default value to use if the current value is not present or corrupted</param>
            <returns>see WorkspaceSettingsResult</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSourceWriter">
            <summary>
            Workspace Settings source writer interface.
            Used for "automated" settings persistence driven by features.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSourceWriter.SetProperty``1(System.String,``0)">
            <summary>
            Persist a value in workspace settings.
            </summary>
            <typeparam name="T">>type of the value</typeparam>
            <param name="key">the name of this entry</param>
            <param name="value">the value to persist</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSourceWriter.Delete(System.String)">
            <summary>
            delete a particular setting (regardless of type - can be property, property collection or array )
            </summary>
            <param name="key">the property name</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSourceWriter.CreateNew">
            <summary>
            Create a new inner scope workspace (to be used later for SetProperty[Array](key, IWorkspaceSettingsSource...);
            </summary>
            <returns>a compatible IWorkspaceSettingsSource implementation</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.SettingsTypes">
            <summary>
            standard settings types
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Settings.SettingsTypes.Debugging">
            <summary>
            Launch.json we use that for settings specifically related to F5 experience
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Settings.SettingsTypes.Tasks">
            <summary>
            task.json  for custom file contexts
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Settings.SettingsTypes.Generic">
            <summary>
            Generic Workspace settings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Settings.SettingsTypes.WorkspaceControlSettings">
             <summary>
             Immutable workspace control properties.
             These are special control properties that are not changable during lifteme of workspace settings.
            
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Settings.SettingsTypes.Providers">
            <summary>
            providers.json we use to select a provider
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Settings.SettingsTypes.OpenCloseState">
            <summary>
            State cache settings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.Settings.SettingsTypes.FeatureFlags">
            <summary>
            Feature flags settings
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsChangedEventArgs">
            <summary>
            Settings change events data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsChangedEventArgs"/> class.
            </summary>
            <param name="type">settings type</param>
            <param name="scopePath">settings scope</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsChangedEventArgs.Type">
            <summary>
            Settings tuple (aka generic launch)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsChangedEventArgs.ScopePath">
            <summary>
            The relative path to location under workspace folders, that is affected by the particular change.
            This is related to the Settings scope used to acquire the settings from Settings manager such that
            any such location under The value presented here should be considered invalidated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions">
            <summary>
            Convenience extension for IWorkspaceSettings interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.Property``1(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSource,System.String,``0)">
            <summary>
            Wrapper around WorkspaceSettingsResult GetProperty.
            Used when caller is not interested by the current state, but just want to get the current value to use.
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <param name="defaultValue">optional default value to use if the current value is not present or corrupted</param>
            <returns>the current value as persisted in the settings or default</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.TryGetRootedValue(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings,System.String,System.String@,System.String@)">
            <summary>
            Get a string value with implied root
            </summary>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <param name="value">the string value</param>
            <param name="root">the implied root</param>
            <returns>true if exist</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.AbsolutePath(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings,System.String,System.String)">
            <summary>
            Get a string value representing potentially relative path as full path, using implied root as a base
            </summary>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <param name="defaultValue">default value</param>
            <returns>the absolute path</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.PropertyArray``1(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSource,System.String)">
            <summary>
            Wrapper around WorkspaceSettingsResult GetPropertyArray.
            Used when caller is not interested by the current state, but just want to get the current value to use.
            </summary>
            <typeparam name="T">type of the elements in array</typeparam>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <returns>the current value as persisted in the settings or empty array if there is none</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.UnionPropertyArray``1(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings,System.String)">
            <summary>
            This method will return union of all values in hierarchical chain, not just the top array.
            </summary>
            <typeparam name="T">type of the elements in array</typeparam>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <returns>the current value as persisted in the settings or empty array if there is none</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.PropertyGroup(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings,System.String)">
            <summary>
            A special provider of inner named settings collection (T=IWorkspaceSettings)
            Used when caller is not interested by the current state, but just want to get the current value to use.
            </summary>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <returns>the current value as persisted in the settings or empty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.EnsurePropertyGroup(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettingsSourceWriter,System.String)">
            <summary>
            A variant of "Scope", used during "Save" it will create and add a collection property with "key" name if it does not already exists.
            Used when caller is not interested by the current state, but just want to get the current value to use.
            </summary>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <returns>the current value as persisted in the settings or empty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Settings.WorkspaceSettingsExtensions.PropertyGroupArray(Microsoft.VisualStudio.Workspace.Settings.IWorkspaceSettings,System.String)">
            <summary>
            A special accessors for inner named settings collection array (T=IWorkspaceSettings)
            Used when caller is not interested by the current state, but just want to get the current value to use.
            </summary>
            <param name="settings">the settings instance</param>
            <param name="key">the name of the property</param>
            <returns>the current value as persisted in the settings or empty array</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Strings.CollectionCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Collection must not be empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Strings.MembersNotInitialized">
            <summary>
              Looks up a localized string similar to All members must be initialized..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Strings.StringCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Value must not be the empty string..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.WorkspaceHelper">
            <summary>
            IWorkspace extensions
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceHelper.GetFirstFileContextActionAsync``1(Microsoft.VisualStudio.Workspace.IWorkspace,System.String,``0,System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Get the first available action for a workspace context
            </summary>
            <typeparam name="T">Type of the workspace context</typeparam>
            <param name="workspace">The workspace instance</param>
            <param name="filePath">The workspace file path</param>
            <param name="context">The instance of the workspace context</param>
            <param name="fileContextTypes">Optional list of file context types</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The first available action (or null)</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceHelper.GetFirstFileContextsAsync``1(Microsoft.VisualStudio.Workspace.IWorkspace,System.String,``0,System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Get the first available context for a workspace context
            </summary>
            <typeparam name="T">Type of the workspace context</typeparam>
            <param name="workspace">The workspace instance</param>
            <param name="filePath">The workspace file path</param>
            <param name="context">The instance of the workspace context</param>
            <param name="fileContextTypes">Optional list of file context types</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The first available file context</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceHelper.GetWorkspaceWorkingFolder(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Get the working folder for this workspace
            </summary>
            <param name="workspace">the workspace</param>
            <returns>working folder</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceHelper.GetGlobalSettingsFolder(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Get the working folder for this workspace
            </summary>
            <param name="workspace">the workspace</param>
            <returns>working folder</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceHelper.MakeRootedUnderWorkingFolder(Microsoft.VisualStudio.Workspace.IWorkspace,System.String)">
            <summary>
            Get a full path under workspace working folder.
            </summary>
            <param name="workspace">the workspace</param>
            <param name="relative">relative path</param>
            <returns>full path under working folder</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.WorkspaceServiceFactoryOptions">
            <summary>
            Options for workspace service factories.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.WorkspaceServiceFactoryOptions.None">
            <summary>
            Default workspace factory options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.WorkspaceServiceFactoryOptions.CreateOnWorkspaceInitialize">
            <summary>
            Create the factory instance when workspace is being initialized
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Workspace.WorkspaceServiceFactoryOptions.IsCreateAsync">
            <summary>
            If the service has async creation pattern
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper">
            <summary>
            IWorkspace service helpers
            Contains method to access IWorkspace based services
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetService``1(Microsoft.VisualStudio.Workspace.IWorkspace,System.Boolean)">
            <summary>
            Get a service type from a workspace
            </summary>
            <typeparam name="T">Type of the service to ask for</typeparam>
            <param name="workspace">The workspace context</param>
            <param name="throwIfNotFound">Throw exception if service not found</param>
            <returns>The workspace service or null if not found </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetServiceAsync``1(Microsoft.VisualStudio.Workspace.IWorkspace,System.Boolean)">
            <summary>
            Get a service type from a workspace using the async pattern
            </summary>
            <typeparam name="T">Type of the service to ask for</typeparam>
            <param name="workspace">The workspace context</param>
            <param name="throwIfNotFound">Throw exception if service not found</param>
            <returns>The workspace service or null if not found </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetFindFilesService(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Get the IFindFilesService service for a workspace
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>The instance of the IFindFilesService</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetFileWatcherService(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Get the IFileSystemChanged service for a workspace
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>The instance of the IFileSystemChanged</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetSettingsManager(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Get the IWorkspaceSettingsManager service for a workspace
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>The instance of the IWorkspaceSettingsManager</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetAssetsManager(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Get the shared access control service
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>The instance of the AssetsControl.IAssetsAccessManager</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetIndexWorkspaceService(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Get the IIndexWorkspaceService for a workspace instance
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>The instance of the IIndexWorkspaceService or null if not found</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetIndexWorkspaceDataService(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Get the IIndexWorkspaceDataService for a workspace instance
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>The instance of the IIndexWorkspaceDataService or null if not found</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetBuildService(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Return the build service from a workspace
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>Instance of an IBuildService or null if not found</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetBuildService2(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Return the IBuildService2 from a workspace
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>Instance of an IBuildService2</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetBuildService3(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Return the IBuildService3 from a workspace
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>Instance of an IBuildService3</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetBuildMessageService(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Return the build message service from a workspace
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>Instance of an IBuildMessageService or null if not found</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetProjectConfigurationServiceAsync(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Return the IProjectConfigurationManager service
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>Instance of an IProjectConfigurationManager or null if not found</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetCustomContextService(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Return the ICustomContextService service
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>Instance of an ICustomContextService or null if not found</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.WorkspaceServiceHelper.GetPropertyEvaluatorServiceAsync(Microsoft.VisualStudio.Workspace.IWorkspace)">
            <summary>
            Return the IPropertyEvaluatorService service
            </summary>
            <param name="workspace">workspace instance</param>
            <returns>Instance of an IPropertyEvaluatorService or null if not found</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.PathHelper">
            <summary>
            A collection of file system path analysis and manipulation functions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.MakeRooted(System.String,System.String)">
            <summary>
            Generates an absolute path from a base path and another path.
            </summary>
            <param name="basePath">
            An absolute path to use as the root if <paramref name="path"/> is relative.
            IMPORTANT: if basePath is a directory, it must end with a directory separator character or else
            it will be treated like a filename and discarded.
            </param>
            <param name="path">A relative or absolute path, that needs to be absolute.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="basePath"/> argument is not an absolute path.</exception>
            <returns>
            A normalized, absolute path.  A path with relative parents (i.e. c:\temp\tmp\..\a.txt) will never be returned.
            Not necessarily canonical, in that the file casing of the path is not guaranteed to be consistent.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.MakeRelative(System.String,System.String)">
            <summary>
            given the absolute location of a file, and a disc location, returns relative file path to that disk location.
            </summary>
            <param name="basePath">
            The base path we want to relativize to. Must be absolute.
            Should <i>not</i> include a filename as the last segment will be interpreted as a directory.
            </param>
            <param name="path">
            The path we need to make relative to basePath.  The path can be either absolute path or a relative path in which case it is relative to the base path
            </param>
            <returns>
            The relative path (can be the full path when no relationship exists).
            If <paramref name="basePath"/> and <paramref name="path"/> are equivalent, the empty string is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.EnsureNoTrailingSlash(System.String)">
            <summary>
            Make sure there is no [unnecessary] trailing directory separator.
            </summary>
            <param name="path">directory path</param>
            <returns>directory path without trailing slash</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.EnsureTrailingSlash(System.String)">
            <summary>
            Make sure there is a trailing directory separator.
            </summary>
            <param name="path">directory path</param>
            <returns>directory path with trailing slash</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.IsInDirectoryCone(System.String,System.String)">
            <summary>
            Detects whether a given file falls within a given directory.
            </summary>
            <param name="directory">The absolute, normalized path to the directory.</param>
            <param name="file">The absolute, normalized path to the file.</param>
            <returns><c>true</c> if the given file falls within the given directory.</returns>
            <remarks>
            The current implementation of this method does NOT normalize the paths before the check.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.IsRooted(System.String)">
            <summary>
            Tests a path to see if it is absolute or not.  More reliable that Path.IsPathRooted.
            </summary>
            <param name="path">The path to check.</param>
            <returns><c>true</c> if the path is rooted; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.IsFolder(System.String)">
            <summary>
            Check if path is a directory
            </summary>
            <param name="fullPath">The path to check</param>
            <returns>true if the path is a directory</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.GetCorrectCapitalization(System.String)">
            <summary>
            Gets the correctly cased path for a given directory.
            </summary>
            <param name="fullPath">Full file system path of a file or directory.</param>
            <returns>New file system info with correctly cased path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.GetCorrectCapitalization(System.IO.DirectoryInfo)">
            <summary>
            Gets the correctly cased path for a given directory.
            </summary>
            <param name="di">Directory to find the correct casing for.</param>
            <returns>New directory with correctly cased path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.IsPathValid(System.String)">
            <summary>
            Verify a valid path
            </summary>
            <param name="path">The path to verify</param>
            <returns>True if a valid path</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.IsRootScope(System.String,System.String)">
            <summary>
            Check if the scope is the root workspace scope
            </summary>
            <param name="scopePath">the scope path (can be either relative or absolute)</param>
            <param name="workspaceRoot">the workspace root path</param>
            <returns>True if it is a root scope</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.IsUnderTempFolder(System.String)">
            <summary>
            Check if a rooted path is inside the temp folder
            </summary>
            <param name="path">rooted path</param>
            <returns><c>true</c> if path is under temp folder, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.PathNeedsNormalization(System.String)">
            <summary>
            A few fast checks that determine whether normalization of a path is warranted.
            </summary>
            <param name="path">A non-empty path.</param>
            <returns><c>true</c> if normalization is likely needed; <c>false</c> if normalization doesn't appear to be needed.</returns>
            <remarks>
            In the interest of executing very fast (since this method is used in fast-or-slow-path checks)
            this method by no means is comprehensive, but it should catch the common causes for needing normalization.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.CreateUriFromPath(System.String)">
            <summary>
            Helper function to create Uri object form path.
            </summary>
            <param name="path">path string</param>
            <returns>uri object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.PathHelper.CleanupLocalFilePath(System.String)">
            <summary>
            Fixes common problems with local paths like double-backslash.
            </summary>
            <param name="path">The path to fix up.</param>
            <returns>The cleaned up path.</returns>
        </member>
    </members>
</doc>
